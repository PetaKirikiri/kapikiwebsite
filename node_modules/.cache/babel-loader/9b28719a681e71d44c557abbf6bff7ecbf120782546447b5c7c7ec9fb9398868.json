{"ast":null,"code":"// We'll load the OAuth credentials from the file\nlet oauthCredentials = null;\nasync function loadOAuthCredentials() {\n  if (oauthCredentials) return oauthCredentials;\n  const response = await fetch(\"/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json\");\n  oauthCredentials = await response.json();\n  return oauthCredentials;\n}\nconst OAUTH_REDIRECT_URI = window.location.origin + \"/oauth-callback\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\n// Function to handle Google OAuth login - you'll only need to do this once\nexport async function initializeGmailAuth() {\n  const credentials = await loadOAuthCredentials();\n  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${credentials.web.client_id}&redirect_uri=${encodeURIComponent(OAUTH_REDIRECT_URI)}&response_type=code&access_type=offline&prompt=consent&scope=https://www.googleapis.com/auth/gmail.send`;\n\n  // Store the current page URL so we can return after auth\n  localStorage.setItem(\"emailAuthReturnTo\", window.location.pathname);\n\n  // Redirect to Google login\n  window.location.href = authUrl;\n}\n\n// Function to get access token using the refresh token\nasync function getAccessToken() {\n  const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n  if (!refreshToken) {\n    initializeGmailAuth();\n    return null;\n  }\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\"\n    })\n  });\n  if (!response.ok) {\n    // If refresh token is invalid, we need to re-authenticate\n    localStorage.removeItem(\"gmail_refresh_token\");\n    initializeGmailAuth();\n    return null;\n  }\n  const data = await response.json();\n  return data.access_token;\n}\nexport async function handleAuthCallback(code) {\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      code,\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      redirect_uri: OAUTH_REDIRECT_URI,\n      grant_type: \"authorization_code\"\n    })\n  });\n  const data = await response.json();\n  localStorage.setItem(\"gmail_refresh_token\", data.refresh_token);\n  return data.access_token;\n}\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    // Get a valid access token\n    const accessToken = await getAccessToken();\n    if (!accessToken) return; // This will trigger re-auth if needed\n\n    // Create email message\n    const message = createMessage(recipientEmails, subject, messageText);\n\n    // Send email using Gmail API\n    const response = await fetch(\"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        raw: message\n      })\n    });\n    if (!response.ok) {\n      var _errorData$error;\n      const errorData = await response.json();\n      throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || \"Failed to send email\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw error;\n  }\n}\nfunction createMessage(recipientEmails, subject, messageText) {\n  const emailLines = [\"MIME-Version: 1.0\", 'Content-Type: text/plain; charset=\"UTF-8\"', \"Content-Transfer-Encoding: 7bit\", \"from: \" + SENDER_EMAIL, \"to: \" + recipientEmails.join(\",\"), \"subject: \" + subject, \"\", messageText].join(\"\\r\\n\");\n  return btoa(emailLines).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}","map":{"version":3,"names":["oauthCredentials","loadOAuthCredentials","response","fetch","json","OAUTH_REDIRECT_URI","window","location","origin","SENDER_EMAIL","initializeGmailAuth","credentials","authUrl","web","client_id","encodeURIComponent","localStorage","setItem","pathname","href","getAccessToken","refreshToken","getItem","method","headers","body","URLSearchParams","client_secret","refresh_token","grant_type","ok","removeItem","data","access_token","handleAuthCallback","code","redirect_uri","sendEmail","recipientEmails","subject","messageText","accessToken","message","createMessage","Authorization","JSON","stringify","raw","_errorData$error","errorData","Error","error","console","emailLines","join","btoa","replace"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/emailService.js"],"sourcesContent":["// We'll load the OAuth credentials from the file\nlet oauthCredentials = null;\n\nasync function loadOAuthCredentials() {\n  if (oauthCredentials) return oauthCredentials;\n\n  const response = await fetch(\n    \"/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json\"\n  );\n  oauthCredentials = await response.json();\n  return oauthCredentials;\n}\n\nconst OAUTH_REDIRECT_URI = window.location.origin + \"/oauth-callback\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\n// Function to handle Google OAuth login - you'll only need to do this once\nexport async function initializeGmailAuth() {\n  const credentials = await loadOAuthCredentials();\n  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${\n    credentials.web.client_id\n  }&redirect_uri=${encodeURIComponent(\n    OAUTH_REDIRECT_URI\n  )}&response_type=code&access_type=offline&prompt=consent&scope=https://www.googleapis.com/auth/gmail.send`;\n\n  // Store the current page URL so we can return after auth\n  localStorage.setItem(\"emailAuthReturnTo\", window.location.pathname);\n\n  // Redirect to Google login\n  window.location.href = authUrl;\n}\n\n// Function to get access token using the refresh token\nasync function getAccessToken() {\n  const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n  if (!refreshToken) {\n    initializeGmailAuth();\n    return null;\n  }\n\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: new URLSearchParams({\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\",\n    }),\n  });\n\n  if (!response.ok) {\n    // If refresh token is invalid, we need to re-authenticate\n    localStorage.removeItem(\"gmail_refresh_token\");\n    initializeGmailAuth();\n    return null;\n  }\n\n  const data = await response.json();\n  return data.access_token;\n}\n\nexport async function handleAuthCallback(code) {\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: new URLSearchParams({\n      code,\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      redirect_uri: OAUTH_REDIRECT_URI,\n      grant_type: \"authorization_code\",\n    }),\n  });\n\n  const data = await response.json();\n  localStorage.setItem(\"gmail_refresh_token\", data.refresh_token);\n  return data.access_token;\n}\n\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    // Get a valid access token\n    const accessToken = await getAccessToken();\n    if (!accessToken) return; // This will trigger re-auth if needed\n\n    // Create email message\n    const message = createMessage(recipientEmails, subject, messageText);\n\n    // Send email using Gmail API\n    const response = await fetch(\n      \"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\",\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ raw: message }),\n      }\n    );\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error?.message || \"Failed to send email\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw error;\n  }\n}\n\nfunction createMessage(recipientEmails, subject, messageText) {\n  const emailLines = [\n    \"MIME-Version: 1.0\",\n    'Content-Type: text/plain; charset=\"UTF-8\"',\n    \"Content-Transfer-Encoding: 7bit\",\n    \"from: \" + SENDER_EMAIL,\n    \"to: \" + recipientEmails.join(\",\"),\n    \"subject: \" + subject,\n    \"\",\n    messageText,\n  ].join(\"\\r\\n\");\n\n  return btoa(emailLines)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n}\n"],"mappings":"AAAA;AACA,IAAIA,gBAAgB,GAAG,IAAI;AAE3B,eAAeC,oBAAoBA,CAAA,EAAG;EACpC,IAAID,gBAAgB,EAAE,OAAOA,gBAAgB;EAE7C,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8FACF,CAAC;EACDH,gBAAgB,GAAG,MAAME,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxC,OAAOJ,gBAAgB;AACzB;AAEA,MAAMK,kBAAkB,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAG,iBAAiB;AACrE,MAAMC,YAAY,GAAG,mBAAmB;;AAExC;AACA,OAAO,eAAeC,mBAAmBA,CAAA,EAAG;EAC1C,MAAMC,WAAW,GAAG,MAAMV,oBAAoB,CAAC,CAAC;EAChD,MAAMW,OAAO,GAAG,0DACdD,WAAW,CAACE,GAAG,CAACC,SAAS,iBACVC,kBAAkB,CACjCV,kBACF,CAAC,yGAAyG;;EAE1G;EACAW,YAAY,CAACC,OAAO,CAAC,mBAAmB,EAAEX,MAAM,CAACC,QAAQ,CAACW,QAAQ,CAAC;;EAEnE;EACAZ,MAAM,CAACC,QAAQ,CAACY,IAAI,GAAGP,OAAO;AAChC;;AAEA;AACA,eAAeQ,cAAcA,CAAA,EAAG;EAC9B,MAAMC,YAAY,GAAGL,YAAY,CAACM,OAAO,CAAC,qBAAqB,CAAC;EAChE,IAAI,CAACD,YAAY,EAAE;IACjBX,mBAAmB,CAAC,CAAC;IACrB,OAAO,IAAI;EACb;EAEA,MAAMC,WAAW,GAAG,MAAMV,oBAAoB,CAAC,CAAC;EAChD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;IAClEoB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAE,IAAIC,eAAe,CAAC;MACxBZ,SAAS,EAAEH,WAAW,CAACE,GAAG,CAACC,SAAS;MACpCa,aAAa,EAAEhB,WAAW,CAACE,GAAG,CAACc,aAAa;MAC5CC,aAAa,EAAEP,YAAY;MAC3BQ,UAAU,EAAE;IACd,CAAC;EACH,CAAC,CAAC;EAEF,IAAI,CAAC3B,QAAQ,CAAC4B,EAAE,EAAE;IAChB;IACAd,YAAY,CAACe,UAAU,CAAC,qBAAqB,CAAC;IAC9CrB,mBAAmB,CAAC,CAAC;IACrB,OAAO,IAAI;EACb;EAEA,MAAMsB,IAAI,GAAG,MAAM9B,QAAQ,CAACE,IAAI,CAAC,CAAC;EAClC,OAAO4B,IAAI,CAACC,YAAY;AAC1B;AAEA,OAAO,eAAeC,kBAAkBA,CAACC,IAAI,EAAE;EAC7C,MAAMxB,WAAW,GAAG,MAAMV,oBAAoB,CAAC,CAAC;EAChD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;IAClEoB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAE,IAAIC,eAAe,CAAC;MACxBS,IAAI;MACJrB,SAAS,EAAEH,WAAW,CAACE,GAAG,CAACC,SAAS;MACpCa,aAAa,EAAEhB,WAAW,CAACE,GAAG,CAACc,aAAa;MAC5CS,YAAY,EAAE/B,kBAAkB;MAChCwB,UAAU,EAAE;IACd,CAAC;EACH,CAAC,CAAC;EAEF,MAAMG,IAAI,GAAG,MAAM9B,QAAQ,CAACE,IAAI,CAAC,CAAC;EAClCY,YAAY,CAACC,OAAO,CAAC,qBAAqB,EAAEe,IAAI,CAACJ,aAAa,CAAC;EAC/D,OAAOI,IAAI,CAACC,YAAY;AAC1B;AAEA,OAAO,eAAeI,SAASA,CAACC,eAAe,EAAEC,OAAO,EAAEC,WAAW,EAAE;EACrE,IAAI;IACF;IACA,MAAMC,WAAW,GAAG,MAAMrB,cAAc,CAAC,CAAC;IAC1C,IAAI,CAACqB,WAAW,EAAE,OAAO,CAAC;;IAE1B;IACA,MAAMC,OAAO,GAAGC,aAAa,CAACL,eAAe,EAAEC,OAAO,EAAEC,WAAW,CAAC;;IAEpE;IACA,MAAMtC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8DAA8D,EAC9D;MACEoB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPoB,aAAa,EAAE,UAAUH,WAAW,EAAE;QACtC,cAAc,EAAE;MAClB,CAAC;MACDhB,IAAI,EAAEoB,IAAI,CAACC,SAAS,CAAC;QAAEC,GAAG,EAAEL;MAAQ,CAAC;IACvC,CACF,CAAC;IAED,IAAI,CAACxC,QAAQ,CAAC4B,EAAE,EAAE;MAAA,IAAAkB,gBAAA;MAChB,MAAMC,SAAS,GAAG,MAAM/C,QAAQ,CAACE,IAAI,CAAC,CAAC;MACvC,MAAM,IAAI8C,KAAK,CAAC,EAAAF,gBAAA,GAAAC,SAAS,CAACE,KAAK,cAAAH,gBAAA,uBAAfA,gBAAA,CAAiBN,OAAO,KAAI,sBAAsB,CAAC;IACrE;IAEA,OAAO,MAAMxC,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAO+C,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF;AAEA,SAASR,aAAaA,CAACL,eAAe,EAAEC,OAAO,EAAEC,WAAW,EAAE;EAC5D,MAAMa,UAAU,GAAG,CACjB,mBAAmB,EACnB,2CAA2C,EAC3C,iCAAiC,EACjC,QAAQ,GAAG5C,YAAY,EACvB,MAAM,GAAG6B,eAAe,CAACgB,IAAI,CAAC,GAAG,CAAC,EAClC,WAAW,GAAGf,OAAO,EACrB,EAAE,EACFC,WAAW,CACZ,CAACc,IAAI,CAAC,MAAM,CAAC;EAEd,OAAOC,IAAI,CAACF,UAAU,CAAC,CACpBG,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}