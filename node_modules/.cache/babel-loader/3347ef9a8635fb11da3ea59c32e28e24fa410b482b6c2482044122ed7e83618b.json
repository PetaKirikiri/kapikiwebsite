{"ast":null,"code":"// We'll load the OAuth credentials from the file\nlet oauthCredentials = null;\nasync function loadOAuthCredentials() {\n  if (oauthCredentials) return oauthCredentials;\n  try {\n    const response = await fetch(\"/Ka-Piki/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json\");\n    if (!response.ok) {\n      throw new Error(`Failed to load OAuth credentials: ${response.status}`);\n    }\n    oauthCredentials = await response.json();\n    return oauthCredentials;\n  } catch (error) {\n    console.error(\"Error loading OAuth credentials:\", error);\n    throw error;\n  }\n}\nconst OAUTH_REDIRECT_URI = window.location.origin + \"/oauth-callback\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\n// Function to handle Google OAuth login - you'll only need to do this once\nexport async function initializeGmailAuth() {\n  const credentials = await loadOAuthCredentials();\n  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${credentials.web.client_id}&redirect_uri=${encodeURIComponent(OAUTH_REDIRECT_URI)}&response_type=code&access_type=offline&prompt=consent&scope=https://www.googleapis.com/auth/gmail.send`;\n\n  // Store the current page URL so we can return after auth\n  localStorage.setItem(\"emailAuthReturnTo\", window.location.pathname);\n\n  // Redirect to Google login\n  window.location.href = authUrl;\n}\n\n// Function to get access token using the refresh token\nasync function getAccessToken() {\n  const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n  if (!refreshToken) {\n    initializeGmailAuth();\n    return null;\n  }\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\"\n    })\n  });\n  if (!response.ok) {\n    // If refresh token is invalid, we need to re-authenticate\n    localStorage.removeItem(\"gmail_refresh_token\");\n    initializeGmailAuth();\n    return null;\n  }\n  const data = await response.json();\n  return data.access_token;\n}\nexport async function handleAuthCallback(code) {\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      code,\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      redirect_uri: OAUTH_REDIRECT_URI,\n      grant_type: \"authorization_code\"\n    })\n  });\n  const data = await response.json();\n  localStorage.setItem(\"gmail_refresh_token\", data.refresh_token);\n  return data.access_token;\n}\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    // Get a valid access token\n    const accessToken = await getAccessToken();\n    if (!accessToken) return; // This will trigger re-auth if needed\n\n    // Create email message\n    const message = createMessage(recipientEmails, subject, messageText);\n    console.log(\"Sending email with message:\", message);\n\n    // Send email using Gmail API with your email address\n    const response = await fetch(`https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(SENDER_EMAIL)}/messages/send`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        raw: message\n      })\n    });\n    const responseText = await response.text();\n    console.log(\"Gmail API response:\", response.status, responseText);\n    if (!response.ok) {\n      console.error(\"Gmail API error response:\", responseText);\n      try {\n        var _errorData$error;\n        const errorData = JSON.parse(responseText);\n        throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || \"Failed to send email\");\n      } catch (e) {\n        throw new Error(\"Failed to send email: \" + responseText);\n      }\n    }\n    return {\n      success: true,\n      response: responseText\n    };\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw error;\n  }\n}\nfunction createMessage(recipientEmails, subject, messageText) {\n  // Format the email headers properly\n  const headers = {\n    \"MIME-Version\": \"1.0\",\n    \"Content-Type\": 'text/plain; charset=\"UTF-8\"',\n    \"Content-Transfer-Encoding\": \"7bit\",\n    From: SENDER_EMAIL,\n    To: recipientEmails.join(\",\"),\n    Subject: subject\n  };\n\n  // Build the email with proper headers\n  const email = Object.entries(headers).map(([key, value]) => `${key}: ${value}`).join(\"\\r\\n\") + \"\\r\\n\\r\\n\" + messageText;\n\n  // Base64URL encode the email\n  const base64Email = btoa(email).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  console.log(\"Created email:\", {\n    headers,\n    messageText,\n    encodedLength: base64Email.length\n  });\n  return base64Email;\n}","map":{"version":3,"names":["oauthCredentials","loadOAuthCredentials","response","fetch","ok","Error","status","json","error","console","OAUTH_REDIRECT_URI","window","location","origin","SENDER_EMAIL","initializeGmailAuth","credentials","authUrl","web","client_id","encodeURIComponent","localStorage","setItem","pathname","href","getAccessToken","refreshToken","getItem","method","headers","body","URLSearchParams","client_secret","refresh_token","grant_type","removeItem","data","access_token","handleAuthCallback","code","redirect_uri","sendEmail","recipientEmails","subject","messageText","accessToken","message","createMessage","log","Authorization","JSON","stringify","raw","responseText","text","_errorData$error","errorData","parse","e","success","From","To","join","Subject","email","Object","entries","map","key","value","base64Email","btoa","replace","encodedLength","length"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/emailService.js"],"sourcesContent":["// We'll load the OAuth credentials from the file\nlet oauthCredentials = null;\n\nasync function loadOAuthCredentials() {\n  if (oauthCredentials) return oauthCredentials;\n\n  try {\n    const response = await fetch(\n      \"/Ka-Piki/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json\"\n    );\n\n    if (!response.ok) {\n      throw new Error(`Failed to load OAuth credentials: ${response.status}`);\n    }\n\n    oauthCredentials = await response.json();\n    return oauthCredentials;\n  } catch (error) {\n    console.error(\"Error loading OAuth credentials:\", error);\n    throw error;\n  }\n}\n\nconst OAUTH_REDIRECT_URI = window.location.origin + \"/oauth-callback\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\n// Function to handle Google OAuth login - you'll only need to do this once\nexport async function initializeGmailAuth() {\n  const credentials = await loadOAuthCredentials();\n  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${\n    credentials.web.client_id\n  }&redirect_uri=${encodeURIComponent(\n    OAUTH_REDIRECT_URI\n  )}&response_type=code&access_type=offline&prompt=consent&scope=https://www.googleapis.com/auth/gmail.send`;\n\n  // Store the current page URL so we can return after auth\n  localStorage.setItem(\"emailAuthReturnTo\", window.location.pathname);\n\n  // Redirect to Google login\n  window.location.href = authUrl;\n}\n\n// Function to get access token using the refresh token\nasync function getAccessToken() {\n  const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n  if (!refreshToken) {\n    initializeGmailAuth();\n    return null;\n  }\n\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: new URLSearchParams({\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\",\n    }),\n  });\n\n  if (!response.ok) {\n    // If refresh token is invalid, we need to re-authenticate\n    localStorage.removeItem(\"gmail_refresh_token\");\n    initializeGmailAuth();\n    return null;\n  }\n\n  const data = await response.json();\n  return data.access_token;\n}\n\nexport async function handleAuthCallback(code) {\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: new URLSearchParams({\n      code,\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      redirect_uri: OAUTH_REDIRECT_URI,\n      grant_type: \"authorization_code\",\n    }),\n  });\n\n  const data = await response.json();\n  localStorage.setItem(\"gmail_refresh_token\", data.refresh_token);\n  return data.access_token;\n}\n\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    // Get a valid access token\n    const accessToken = await getAccessToken();\n    if (!accessToken) return; // This will trigger re-auth if needed\n\n    // Create email message\n    const message = createMessage(recipientEmails, subject, messageText);\n    console.log(\"Sending email with message:\", message);\n\n    // Send email using Gmail API with your email address\n    const response = await fetch(\n      `https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(\n        SENDER_EMAIL\n      )}/messages/send`,\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ raw: message }),\n      }\n    );\n\n    const responseText = await response.text();\n    console.log(\"Gmail API response:\", response.status, responseText);\n\n    if (!response.ok) {\n      console.error(\"Gmail API error response:\", responseText);\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(errorData.error?.message || \"Failed to send email\");\n      } catch (e) {\n        throw new Error(\"Failed to send email: \" + responseText);\n      }\n    }\n\n    return { success: true, response: responseText };\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw error;\n  }\n}\n\nfunction createMessage(recipientEmails, subject, messageText) {\n  // Format the email headers properly\n  const headers = {\n    \"MIME-Version\": \"1.0\",\n    \"Content-Type\": 'text/plain; charset=\"UTF-8\"',\n    \"Content-Transfer-Encoding\": \"7bit\",\n    From: SENDER_EMAIL,\n    To: recipientEmails.join(\",\"),\n    Subject: subject,\n  };\n\n  // Build the email with proper headers\n  const email =\n    Object.entries(headers)\n      .map(([key, value]) => `${key}: ${value}`)\n      .join(\"\\r\\n\") +\n    \"\\r\\n\\r\\n\" +\n    messageText;\n\n  // Base64URL encode the email\n  const base64Email = btoa(email)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  console.log(\"Created email:\", {\n    headers,\n    messageText,\n    encodedLength: base64Email.length,\n  });\n\n  return base64Email;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}