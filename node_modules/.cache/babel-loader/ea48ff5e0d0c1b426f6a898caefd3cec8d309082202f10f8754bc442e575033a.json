{"ast":null,"code":"// We'll load the OAuth credentials from the file\nlet oauthCredentials = null;\nasync function loadOAuthCredentials() {\n  if (oauthCredentials) return oauthCredentials;\n  try {\n    // First check if we're running locally\n    const isLocal = window.location.hostname === \"localhost\";\n\n    // Get the base path from the current URL\n    const basePath = window.location.pathname.split(\"/\")[1] || \"\"; // Gets 'kapikiwebsite' if present\n\n    // Use the correct path for local development\n    const credentialsPath = isLocal ? `/${basePath}/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json` : \"/Ka-Piki/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json\";\n    console.log(\"Trying to load credentials from:\", credentialsPath);\n    const response = await fetch(credentialsPath);\n    if (!response.ok) {\n      const text = await response.text();\n      console.error(\"Failed to load credentials. Response:\", {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        text: text.substring(0, 100) + \"...\" // Show start of response\n      });\n      throw new Error(`Could not load OAuth credentials (${response.status}). Check if the file exists in the public folder.`);\n    }\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      throw new Error(`Wrong file type received: ${contentType}. Expected JSON. Make sure the file exists in the public folder.`);\n    }\n    oauthCredentials = await response.json();\n    console.log(\"Successfully loaded OAuth credentials\");\n    return oauthCredentials;\n  } catch (error) {\n    console.error(\"Error loading OAuth credentials:\", error);\n    throw new Error(`Failed to load email settings: ${error.message}. Make sure the client_secret file is in the public folder.`);\n  }\n}\n\n// Get the base path from the current URL\nconst basePath = window.location.pathname.split(\"/\")[1] || \"\"; // Gets 'kapikiwebsite' if present\nconst OAUTH_REDIRECT_URI = window.location.origin + (basePath ? `/${basePath}` : \"\") + \"/oauth-callback\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\n// Function to handle Google OAuth login - you'll only need to do this once\nexport async function initializeGmailAuth() {\n  const credentials = await loadOAuthCredentials();\n  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${credentials.web.client_id}&redirect_uri=${encodeURIComponent(OAUTH_REDIRECT_URI)}&response_type=code&access_type=offline&prompt=consent&scope=https://www.googleapis.com/auth/gmail.send`;\n\n  // Store the current page URL so we can return after auth\n  localStorage.setItem(\"emailAuthReturnTo\", window.location.pathname);\n\n  // Redirect to Google login\n  window.location.href = authUrl;\n}\n\n// Function to get access token using the refresh token\nasync function getAccessToken() {\n  const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n  if (!refreshToken) {\n    initializeGmailAuth();\n    return null;\n  }\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\"\n    })\n  });\n  if (!response.ok) {\n    // If refresh token is invalid, we need to re-authenticate\n    localStorage.removeItem(\"gmail_refresh_token\");\n    initializeGmailAuth();\n    return null;\n  }\n  const data = await response.json();\n  return data.access_token;\n}\nexport async function handleAuthCallback(code) {\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      code,\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      redirect_uri: OAUTH_REDIRECT_URI,\n      grant_type: \"authorization_code\"\n    })\n  });\n  const data = await response.json();\n  localStorage.setItem(\"gmail_refresh_token\", data.refresh_token);\n  return data.access_token;\n}\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    // Log the raw data we received\n    console.log(\"Raw email data:\", {\n      to: recipientEmails,\n      subject: subject,\n      message: messageText\n    });\n\n    // Get a valid access token\n    const accessToken = await getAccessToken();\n    if (!accessToken) {\n      throw new Error(\"Could not get access token - authentication required\");\n    }\n\n    // Create email message\n    const message = createMessage(recipientEmails, subject, messageText);\n\n    // Log the formatted message before encoding\n    const decodedMessage = atob(message);\n    console.log(\"Formatted email before sending:\", decodedMessage);\n\n    // Send email using Gmail API with your email address\n    const response = await fetch(`https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(SENDER_EMAIL)}/messages/send`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        raw: message\n      })\n    });\n    const responseText = await response.text();\n    console.log(\"Gmail API response:\", response.status, responseText);\n    if (!response.ok) {\n      console.error(\"Gmail API error response:\", responseText);\n      try {\n        var _errorData$error;\n        const errorData = JSON.parse(responseText);\n        throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || \"Failed to send email\");\n      } catch (e) {\n        throw new Error(\"Failed to send email: \" + responseText);\n      }\n    }\n\n    // Only return success if we get a message ID back\n    try {\n      const responseData = JSON.parse(responseText);\n      if (!responseData.id) {\n        throw new Error(\"No message ID in response\");\n      }\n      return {\n        success: true,\n        messageId: responseData.id,\n        message: \"Email sent successfully and confirmed by Gmail\"\n      };\n    } catch (e) {\n      throw new Error(\"Could not confirm email was sent: \" + responseText);\n    }\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    return {\n      success: false,\n      error: error.message,\n      details: \"Check console for more information\"\n    };\n  }\n}\nfunction createMessage(recipientEmails, subject, messageText) {\n  // Format the email headers properly\n  const headers = {\n    \"MIME-Version\": \"1.0\",\n    \"Content-Type\": 'text/plain; charset=\"UTF-8\"',\n    \"Content-Transfer-Encoding\": \"7bit\",\n    From: SENDER_EMAIL,\n    To: recipientEmails.join(\",\"),\n    Subject: subject\n  };\n\n  // Build the email with proper headers\n  const email = Object.entries(headers).map(([key, value]) => `${key}: ${value}`).join(\"\\r\\n\") + \"\\r\\n\\r\\n\" + messageText;\n\n  // Base64URL encode the email\n  const base64Email = btoa(email).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  console.log(\"Created email:\", {\n    headers,\n    messageText,\n    encodedLength: base64Email.length\n  });\n  return base64Email;\n}","map":{"version":3,"names":["oauthCredentials","loadOAuthCredentials","isLocal","window","location","hostname","basePath","pathname","split","credentialsPath","console","log","response","fetch","ok","text","error","status","statusText","url","substring","Error","contentType","headers","get","includes","json","message","OAUTH_REDIRECT_URI","origin","SENDER_EMAIL","initializeGmailAuth","credentials","authUrl","web","client_id","encodeURIComponent","localStorage","setItem","href","getAccessToken","refreshToken","getItem","method","body","URLSearchParams","client_secret","refresh_token","grant_type","removeItem","data","access_token","handleAuthCallback","code","redirect_uri","sendEmail","recipientEmails","subject","messageText","to","accessToken","createMessage","decodedMessage","atob","Authorization","JSON","stringify","raw","responseText","_errorData$error","errorData","parse","e","responseData","id","success","messageId","details","From","To","join","Subject","email","Object","entries","map","key","value","base64Email","btoa","replace","encodedLength","length"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/emailService.js"],"sourcesContent":["// We'll load the OAuth credentials from the file\nlet oauthCredentials = null;\n\nasync function loadOAuthCredentials() {\n  if (oauthCredentials) return oauthCredentials;\n\n  try {\n    // First check if we're running locally\n    const isLocal = window.location.hostname === \"localhost\";\n\n    // Get the base path from the current URL\n    const basePath = window.location.pathname.split(\"/\")[1] || \"\"; // Gets 'kapikiwebsite' if present\n\n    // Use the correct path for local development\n    const credentialsPath = isLocal\n      ? `/${basePath}/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json`\n      : \"/Ka-Piki/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json\";\n\n    console.log(\"Trying to load credentials from:\", credentialsPath);\n\n    const response = await fetch(credentialsPath);\n\n    if (!response.ok) {\n      const text = await response.text();\n      console.error(\"Failed to load credentials. Response:\", {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        text: text.substring(0, 100) + \"...\", // Show start of response\n      });\n      throw new Error(\n        `Could not load OAuth credentials (${response.status}). Check if the file exists in the public folder.`\n      );\n    }\n\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      throw new Error(\n        `Wrong file type received: ${contentType}. Expected JSON. Make sure the file exists in the public folder.`\n      );\n    }\n\n    oauthCredentials = await response.json();\n    console.log(\"Successfully loaded OAuth credentials\");\n    return oauthCredentials;\n  } catch (error) {\n    console.error(\"Error loading OAuth credentials:\", error);\n    throw new Error(\n      `Failed to load email settings: ${error.message}. Make sure the client_secret file is in the public folder.`\n    );\n  }\n}\n\n// Get the base path from the current URL\nconst basePath = window.location.pathname.split(\"/\")[1] || \"\"; // Gets 'kapikiwebsite' if present\nconst OAUTH_REDIRECT_URI =\n  window.location.origin + (basePath ? `/${basePath}` : \"\") + \"/oauth-callback\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\n// Function to handle Google OAuth login - you'll only need to do this once\nexport async function initializeGmailAuth() {\n  const credentials = await loadOAuthCredentials();\n  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${\n    credentials.web.client_id\n  }&redirect_uri=${encodeURIComponent(\n    OAUTH_REDIRECT_URI\n  )}&response_type=code&access_type=offline&prompt=consent&scope=https://www.googleapis.com/auth/gmail.send`;\n\n  // Store the current page URL so we can return after auth\n  localStorage.setItem(\"emailAuthReturnTo\", window.location.pathname);\n\n  // Redirect to Google login\n  window.location.href = authUrl;\n}\n\n// Function to get access token using the refresh token\nasync function getAccessToken() {\n  const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n  if (!refreshToken) {\n    initializeGmailAuth();\n    return null;\n  }\n\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: new URLSearchParams({\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\",\n    }),\n  });\n\n  if (!response.ok) {\n    // If refresh token is invalid, we need to re-authenticate\n    localStorage.removeItem(\"gmail_refresh_token\");\n    initializeGmailAuth();\n    return null;\n  }\n\n  const data = await response.json();\n  return data.access_token;\n}\n\nexport async function handleAuthCallback(code) {\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: new URLSearchParams({\n      code,\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      redirect_uri: OAUTH_REDIRECT_URI,\n      grant_type: \"authorization_code\",\n    }),\n  });\n\n  const data = await response.json();\n  localStorage.setItem(\"gmail_refresh_token\", data.refresh_token);\n  return data.access_token;\n}\n\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    // Log the raw data we received\n    console.log(\"Raw email data:\", {\n      to: recipientEmails,\n      subject: subject,\n      message: messageText,\n    });\n\n    // Get a valid access token\n    const accessToken = await getAccessToken();\n    if (!accessToken) {\n      throw new Error(\"Could not get access token - authentication required\");\n    }\n\n    // Create email message\n    const message = createMessage(recipientEmails, subject, messageText);\n\n    // Log the formatted message before encoding\n    const decodedMessage = atob(message);\n    console.log(\"Formatted email before sending:\", decodedMessage);\n\n    // Send email using Gmail API with your email address\n    const response = await fetch(\n      `https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(\n        SENDER_EMAIL\n      )}/messages/send`,\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ raw: message }),\n      }\n    );\n\n    const responseText = await response.text();\n    console.log(\"Gmail API response:\", response.status, responseText);\n\n    if (!response.ok) {\n      console.error(\"Gmail API error response:\", responseText);\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(errorData.error?.message || \"Failed to send email\");\n      } catch (e) {\n        throw new Error(\"Failed to send email: \" + responseText);\n      }\n    }\n\n    // Only return success if we get a message ID back\n    try {\n      const responseData = JSON.parse(responseText);\n      if (!responseData.id) {\n        throw new Error(\"No message ID in response\");\n      }\n      return {\n        success: true,\n        messageId: responseData.id,\n        message: \"Email sent successfully and confirmed by Gmail\",\n      };\n    } catch (e) {\n      throw new Error(\"Could not confirm email was sent: \" + responseText);\n    }\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    return {\n      success: false,\n      error: error.message,\n      details: \"Check console for more information\",\n    };\n  }\n}\n\nfunction createMessage(recipientEmails, subject, messageText) {\n  // Format the email headers properly\n  const headers = {\n    \"MIME-Version\": \"1.0\",\n    \"Content-Type\": 'text/plain; charset=\"UTF-8\"',\n    \"Content-Transfer-Encoding\": \"7bit\",\n    From: SENDER_EMAIL,\n    To: recipientEmails.join(\",\"),\n    Subject: subject,\n  };\n\n  // Build the email with proper headers\n  const email =\n    Object.entries(headers)\n      .map(([key, value]) => `${key}: ${value}`)\n      .join(\"\\r\\n\") +\n    \"\\r\\n\\r\\n\" +\n    messageText;\n\n  // Base64URL encode the email\n  const base64Email = btoa(email)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  console.log(\"Created email:\", {\n    headers,\n    messageText,\n    encodedLength: base64Email.length,\n  });\n\n  return base64Email;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}