{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { sendEmail } from './emailService';\nconst OAuthCallback = () => {\n  _s();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const handleCallback = async () => {\n      try {\n        const urlParams = new URLSearchParams(window.location.search);\n        const code = urlParams.get('code');\n        if (!code) {\n          throw new Error('No authorization code received');\n        }\n\n        // Store the authorization code\n        localStorage.setItem('gmail_auth_code', code);\n\n        // Try to get an access token\n        const hasValid = await sendEmail('test@example.com', 'Test', 'Testing OAuth');\n        if (hasValid) {\n          navigate('/clients');\n        } else {\n          throw new Error('Failed to validate credentials');\n        }\n      } catch (error) {\n        console.error('OAuth callback error:', error);\n        navigate('/clients');\n      }\n    };\n    handleCallback();\n  }, [navigate]);\n  return null; // This component doesn't render anything\n};\n_s(OAuthCallback, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = OAuthCallback;\nexport default OAuthCallback;\nvar _c;\n$RefreshReg$(_c, \"OAuthCallback\");","map":{"version":3,"names":["React","useEffect","useNavigate","sendEmail","OAuthCallback","_s","navigate","handleCallback","urlParams","URLSearchParams","window","location","search","code","get","Error","localStorage","setItem","hasValid","error","console","_c","$RefreshReg$"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/oauthCallback.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { sendEmail } from './emailService';\n\nconst OAuthCallback = () => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const handleCallback = async () => {\n      try {\n        const urlParams = new URLSearchParams(window.location.search);\n        const code = urlParams.get('code');\n        \n        if (!code) {\n          throw new Error('No authorization code received');\n        }\n\n        // Store the authorization code\n        localStorage.setItem('gmail_auth_code', code);\n        \n        // Try to get an access token\n        const hasValid = await sendEmail('test@example.com', 'Test', 'Testing OAuth');\n        \n        if (hasValid) {\n          navigate('/clients');\n        } else {\n          throw new Error('Failed to validate credentials');\n        }\n      } catch (error) {\n        console.error('OAuth callback error:', error);\n        navigate('/clients');\n      }\n    };\n\n    handleCallback();\n  }, [navigate]);\n\n  return null; // This component doesn't render anything\n};\n\nexport default OAuthCallback; "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,gBAAgB;AAE1C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMM,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,SAAS,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;QAC7D,MAAMC,IAAI,GAAGL,SAAS,CAACM,GAAG,CAAC,MAAM,CAAC;QAElC,IAAI,CAACD,IAAI,EAAE;UACT,MAAM,IAAIE,KAAK,CAAC,gCAAgC,CAAC;QACnD;;QAEA;QACAC,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAEJ,IAAI,CAAC;;QAE7C;QACA,MAAMK,QAAQ,GAAG,MAAMf,SAAS,CAAC,kBAAkB,EAAE,MAAM,EAAE,eAAe,CAAC;QAE7E,IAAIe,QAAQ,EAAE;UACZZ,QAAQ,CAAC,UAAU,CAAC;QACtB,CAAC,MAAM;UACL,MAAM,IAAIS,KAAK,CAAC,gCAAgC,CAAC;QACnD;MACF,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7Cb,QAAQ,CAAC,UAAU,CAAC;MACtB;IACF,CAAC;IAEDC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC;EAEd,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;AAACD,EAAA,CAlCID,aAAa;EAAA,QACAF,WAAW;AAAA;AAAAmB,EAAA,GADxBjB,aAAa;AAoCnB,eAAeA,aAAa;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}