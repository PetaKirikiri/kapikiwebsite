{"ast":null,"code":"// We'll load the OAuth credentials from the file\nlet oauthCredentials = null;\nasync function loadOAuthCredentials() {\n  if (oauthCredentials) return oauthCredentials;\n  const response = await fetch(\"/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json\");\n  oauthCredentials = await response.json();\n  return oauthCredentials;\n}\nconst OAUTH_REDIRECT_URI = window.location.origin + \"/oauth-callback\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\n// Function to handle Google OAuth login\nexport async function initializeGmailAuth() {\n  const credentials = await loadOAuthCredentials();\n  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${credentials.web.client_id}&redirect_uri=${encodeURIComponent(OAUTH_REDIRECT_URI)}&response_type=token&scope=https://www.googleapis.com/auth/gmail.send`;\n\n  // Store the current page URL so we can return after auth\n  localStorage.setItem(\"emailAuthReturnTo\", window.location.pathname);\n\n  // Redirect to Google login\n  window.location.href = authUrl;\n}\n\n// Function to get access token from URL after OAuth redirect\nexport function getAccessTokenFromUrl() {\n  const hash = window.location.hash.substring(1);\n  const params = new URLSearchParams(hash);\n  return params.get(\"access_token\");\n}\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    // Get the access token from localStorage or redirect to auth\n    let accessToken = localStorage.getItem(\"gmail_access_token\");\n    if (!accessToken) {\n      initializeGmailAuth();\n      return;\n    }\n\n    // Create email message\n    const message = createMessage(recipientEmails, subject, messageText);\n\n    // Send email using Gmail API\n    const response = await fetch(\"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        raw: message\n      })\n    });\n    if (!response.ok) {\n      var _errorData$error;\n      const errorData = await response.json();\n      if (response.status === 401) {\n        // Token expired, clear it and redirect to auth\n        localStorage.removeItem(\"gmail_access_token\");\n        initializeGmailAuth();\n        return;\n      }\n      throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || \"Failed to send email\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw error;\n  }\n}\nfunction createMessage(recipientEmails, subject, messageText) {\n  const emailLines = [\"MIME-Version: 1.0\", 'Content-Type: text/plain; charset=\"UTF-8\"', \"Content-Transfer-Encoding: 7bit\", \"from: \" + SENDER_EMAIL, \"to: \" + recipientEmails.join(\",\"), \"subject: \" + subject, \"\", messageText].join(\"\\r\\n\");\n  return btoa(emailLines).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}","map":{"version":3,"names":["oauthCredentials","loadOAuthCredentials","response","fetch","json","OAUTH_REDIRECT_URI","window","location","origin","SENDER_EMAIL","initializeGmailAuth","credentials","authUrl","web","client_id","encodeURIComponent","localStorage","setItem","pathname","href","getAccessTokenFromUrl","hash","substring","params","URLSearchParams","get","sendEmail","recipientEmails","subject","messageText","accessToken","getItem","message","createMessage","method","headers","Authorization","body","JSON","stringify","raw","ok","_errorData$error","errorData","status","removeItem","Error","error","console","emailLines","join","btoa","replace"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/emailService.js"],"sourcesContent":["// We'll load the OAuth credentials from the file\nlet oauthCredentials = null;\n\nasync function loadOAuthCredentials() {\n  if (oauthCredentials) return oauthCredentials;\n\n  const response = await fetch(\n    \"/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json\"\n  );\n  oauthCredentials = await response.json();\n  return oauthCredentials;\n}\n\nconst OAUTH_REDIRECT_URI = window.location.origin + \"/oauth-callback\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\n// Function to handle Google OAuth login\nexport async function initializeGmailAuth() {\n  const credentials = await loadOAuthCredentials();\n  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${\n    credentials.web.client_id\n  }&redirect_uri=${encodeURIComponent(\n    OAUTH_REDIRECT_URI\n  )}&response_type=token&scope=https://www.googleapis.com/auth/gmail.send`;\n\n  // Store the current page URL so we can return after auth\n  localStorage.setItem(\"emailAuthReturnTo\", window.location.pathname);\n\n  // Redirect to Google login\n  window.location.href = authUrl;\n}\n\n// Function to get access token from URL after OAuth redirect\nexport function getAccessTokenFromUrl() {\n  const hash = window.location.hash.substring(1);\n  const params = new URLSearchParams(hash);\n  return params.get(\"access_token\");\n}\n\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    // Get the access token from localStorage or redirect to auth\n    let accessToken = localStorage.getItem(\"gmail_access_token\");\n    if (!accessToken) {\n      initializeGmailAuth();\n      return;\n    }\n\n    // Create email message\n    const message = createMessage(recipientEmails, subject, messageText);\n\n    // Send email using Gmail API\n    const response = await fetch(\n      \"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\",\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ raw: message }),\n      }\n    );\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      if (response.status === 401) {\n        // Token expired, clear it and redirect to auth\n        localStorage.removeItem(\"gmail_access_token\");\n        initializeGmailAuth();\n        return;\n      }\n      throw new Error(errorData.error?.message || \"Failed to send email\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw error;\n  }\n}\n\nfunction createMessage(recipientEmails, subject, messageText) {\n  const emailLines = [\n    \"MIME-Version: 1.0\",\n    'Content-Type: text/plain; charset=\"UTF-8\"',\n    \"Content-Transfer-Encoding: 7bit\",\n    \"from: \" + SENDER_EMAIL,\n    \"to: \" + recipientEmails.join(\",\"),\n    \"subject: \" + subject,\n    \"\",\n    messageText,\n  ].join(\"\\r\\n\");\n\n  return btoa(emailLines)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}