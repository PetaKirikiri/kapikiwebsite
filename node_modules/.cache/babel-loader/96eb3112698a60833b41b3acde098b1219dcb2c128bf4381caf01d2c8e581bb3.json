{"ast":null,"code":"// We'll load the OAuth credentials from the file\nlet oauthCredentials = null;\n\n// Get the base URL considering the basename\nconst getBaseUrl = () => {\n  const isLocal = window.location.hostname === \"localhost\";\n  return isLocal ? \"/kapikiwebsite\" : \"\";\n};\nasync function loadOAuthCredentials() {\n  if (oauthCredentials) return oauthCredentials;\n  try {\n    // Use the base URL for loading credentials\n    const credentialsPath = `${getBaseUrl()}/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json`;\n    console.log(\"Trying to load credentials from:\", credentialsPath);\n    const response = await fetch(credentialsPath);\n    if (!response.ok) {\n      const text = await response.text();\n      console.error(\"Failed to load credentials. Response:\", {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        text: text.substring(0, 100) + \"...\" // Show start of response\n      });\n      throw new Error(`Could not load OAuth credentials (${response.status}). Check if the file exists in the public folder.`);\n    }\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      throw new Error(`Wrong file type received: ${contentType}. Expected JSON. Make sure the file exists in the public folder.`);\n    }\n    oauthCredentials = await response.json();\n    console.log(\"Successfully loaded OAuth credentials\");\n    return oauthCredentials;\n  } catch (error) {\n    console.error(\"Error loading OAuth credentials:\", error);\n    throw new Error(`Failed to load email settings: ${error.message}. Make sure the client_secret file is in the public folder.`);\n  }\n}\n\n// Use the base URL for the redirect URI\nconst OAUTH_REDIRECT_URI = window.location.origin + getBaseUrl() + \"/oauth-callback\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\n// Function to handle Google OAuth login - you'll only need to do this once\nexport async function initializeGmailAuth() {\n  const credentials = await loadOAuthCredentials();\n  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${credentials.web.client_id}&redirect_uri=${encodeURIComponent(OAUTH_REDIRECT_URI)}&response_type=code&access_type=offline&prompt=consent&scope=https://www.googleapis.com/auth/gmail.send`;\n\n  // Store the current page URL so we can return after auth\n  localStorage.setItem(\"emailAuthReturnTo\", window.location.pathname);\n\n  // Redirect to Google login\n  window.location.href = authUrl;\n}\n\n// Function to get access token using the refresh token\nasync function getAccessToken() {\n  const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n  if (!refreshToken) {\n    initializeGmailAuth();\n    return null;\n  }\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\"\n    })\n  });\n  if (!response.ok) {\n    // If refresh token is invalid, we need to re-authenticate\n    localStorage.removeItem(\"gmail_refresh_token\");\n    initializeGmailAuth();\n    return null;\n  }\n  const data = await response.json();\n  return data.access_token;\n}\nexport async function handleAuthCallback(code) {\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      code,\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      redirect_uri: OAUTH_REDIRECT_URI,\n      grant_type: \"authorization_code\"\n    })\n  });\n  const data = await response.json();\n  localStorage.setItem(\"gmail_refresh_token\", data.refresh_token);\n  return data.access_token;\n}\n\n// Check if we have valid credentials\nasync function hasValidCredentials() {\n  try {\n    const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n    return !!refreshToken;\n  } catch (error) {\n    console.error(\"Error checking credentials:\", error);\n    return false;\n  }\n}\nasync function startOAuthFlow() {\n  const credentials = await loadOAuthCredentials();\n\n  // Store current path for return after auth\n  localStorage.setItem(\"emailAuthReturnTo\", window.location.pathname);\n\n  // Build the OAuth URL\n  const authUrl = new URL(\"https://accounts.google.com/o/oauth2/v2/auth\");\n  authUrl.searchParams.append(\"client_id\", credentials.web.client_id);\n  authUrl.searchParams.append(\"redirect_uri\", OAUTH_REDIRECT_URI);\n  authUrl.searchParams.append(\"response_type\", \"code\");\n  authUrl.searchParams.append(\"scope\", \"https://www.googleapis.com/auth/gmail.send\");\n  authUrl.searchParams.append(\"access_type\", \"offline\");\n  authUrl.searchParams.append(\"prompt\", \"consent\");\n\n  // Redirect to Google's OAuth page\n  window.location.href = authUrl.toString();\n}\n\n// Export the sendEmail function\nexport async function sendEmail(to, subject, body) {\n  try {\n    // First check if we have valid credentials\n    const hasCredentials = await hasValidCredentials();\n    if (!hasCredentials) {\n      console.log(\"No valid credentials found, starting OAuth flow\");\n      await startOAuthFlow();\n      return; // The page will redirect to Google OAuth\n    }\n\n    // If we have credentials, proceed with sending email\n    const accessToken = await getAccessToken();\n    if (!accessToken) {\n      throw new Error(\"Could not get access token - authentication required\");\n    }\n\n    // Log the raw data we received\n    console.log(\"Raw email data:\", {\n      to: to,\n      subject: subject,\n      message: body\n    });\n\n    // Create email message\n    const message = createMessage(to, subject, body);\n\n    // Log the formatted message before encoding\n    const decodedMessage = atob(message);\n    console.log(\"Formatted email before sending:\", decodedMessage);\n\n    // Send email using Gmail API with your email address\n    const response = await fetch(`https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(SENDER_EMAIL)}/messages/send`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        raw: message\n      })\n    });\n    const responseText = await response.text();\n    console.log(\"Gmail API response:\", response.status, responseText);\n    if (!response.ok) {\n      console.error(\"Gmail API error response:\", responseText);\n      try {\n        var _errorData$error;\n        const errorData = JSON.parse(responseText);\n        throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || \"Failed to send email\");\n      } catch (e) {\n        throw new Error(\"Failed to send email: \" + responseText);\n      }\n    }\n\n    // Only return success if we get a message ID back\n    try {\n      const responseData = JSON.parse(responseText);\n      if (!responseData.id) {\n        throw new Error(\"No message ID in response\");\n      }\n      return {\n        success: true,\n        messageId: responseData.id,\n        message: \"Email sent successfully and confirmed by Gmail\"\n      };\n    } catch (e) {\n      throw new Error(\"Could not confirm email was sent: \" + responseText);\n    }\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw error;\n  }\n}\nfunction createMessage(recipientEmails, subject, messageText) {\n  // Format the email headers properly\n  const headers = {\n    \"MIME-Version\": \"1.0\",\n    \"Content-Type\": 'text/plain; charset=\"UTF-8\"',\n    \"Content-Transfer-Encoding\": \"7bit\",\n    From: SENDER_EMAIL,\n    To: recipientEmails.join(\",\"),\n    Subject: subject\n  };\n\n  // Build the email with proper headers\n  const email = Object.entries(headers).map(([key, value]) => `${key}: ${value}`).join(\"\\r\\n\") + \"\\r\\n\\r\\n\" + messageText;\n\n  // Base64URL encode the email\n  const base64Email = btoa(email).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  console.log(\"Created email:\", {\n    headers,\n    messageText,\n    encodedLength: base64Email.length\n  });\n  return base64Email;\n}","map":{"version":3,"names":["oauthCredentials","getBaseUrl","isLocal","window","location","hostname","loadOAuthCredentials","credentialsPath","console","log","response","fetch","ok","text","error","status","statusText","url","substring","Error","contentType","headers","get","includes","json","message","OAUTH_REDIRECT_URI","origin","SENDER_EMAIL","initializeGmailAuth","credentials","authUrl","web","client_id","encodeURIComponent","localStorage","setItem","pathname","href","getAccessToken","refreshToken","getItem","method","body","URLSearchParams","client_secret","refresh_token","grant_type","removeItem","data","access_token","handleAuthCallback","code","redirect_uri","hasValidCredentials","startOAuthFlow","URL","searchParams","append","toString","sendEmail","to","subject","hasCredentials","accessToken","createMessage","decodedMessage","atob","Authorization","JSON","stringify","raw","responseText","_errorData$error","errorData","parse","e","responseData","id","success","messageId","recipientEmails","messageText","From","To","join","Subject","email","Object","entries","map","key","value","base64Email","btoa","replace","encodedLength","length"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/emailService.js"],"sourcesContent":["// We'll load the OAuth credentials from the file\nlet oauthCredentials = null;\n\n// Get the base URL considering the basename\nconst getBaseUrl = () => {\n  const isLocal = window.location.hostname === \"localhost\";\n  return isLocal ? \"/kapikiwebsite\" : \"\";\n};\n\nasync function loadOAuthCredentials() {\n  if (oauthCredentials) return oauthCredentials;\n\n  try {\n    // Use the base URL for loading credentials\n    const credentialsPath = `${getBaseUrl()}/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json`;\n\n    console.log(\"Trying to load credentials from:\", credentialsPath);\n\n    const response = await fetch(credentialsPath);\n\n    if (!response.ok) {\n      const text = await response.text();\n      console.error(\"Failed to load credentials. Response:\", {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        text: text.substring(0, 100) + \"...\", // Show start of response\n      });\n      throw new Error(\n        `Could not load OAuth credentials (${response.status}). Check if the file exists in the public folder.`\n      );\n    }\n\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      throw new Error(\n        `Wrong file type received: ${contentType}. Expected JSON. Make sure the file exists in the public folder.`\n      );\n    }\n\n    oauthCredentials = await response.json();\n    console.log(\"Successfully loaded OAuth credentials\");\n    return oauthCredentials;\n  } catch (error) {\n    console.error(\"Error loading OAuth credentials:\", error);\n    throw new Error(\n      `Failed to load email settings: ${error.message}. Make sure the client_secret file is in the public folder.`\n    );\n  }\n}\n\n// Use the base URL for the redirect URI\nconst OAUTH_REDIRECT_URI =\n  window.location.origin + getBaseUrl() + \"/oauth-callback\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\n// Function to handle Google OAuth login - you'll only need to do this once\nexport async function initializeGmailAuth() {\n  const credentials = await loadOAuthCredentials();\n  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${\n    credentials.web.client_id\n  }&redirect_uri=${encodeURIComponent(\n    OAUTH_REDIRECT_URI\n  )}&response_type=code&access_type=offline&prompt=consent&scope=https://www.googleapis.com/auth/gmail.send`;\n\n  // Store the current page URL so we can return after auth\n  localStorage.setItem(\"emailAuthReturnTo\", window.location.pathname);\n\n  // Redirect to Google login\n  window.location.href = authUrl;\n}\n\n// Function to get access token using the refresh token\nasync function getAccessToken() {\n  const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n  if (!refreshToken) {\n    initializeGmailAuth();\n    return null;\n  }\n\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: new URLSearchParams({\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\",\n    }),\n  });\n\n  if (!response.ok) {\n    // If refresh token is invalid, we need to re-authenticate\n    localStorage.removeItem(\"gmail_refresh_token\");\n    initializeGmailAuth();\n    return null;\n  }\n\n  const data = await response.json();\n  return data.access_token;\n}\n\nexport async function handleAuthCallback(code) {\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: new URLSearchParams({\n      code,\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      redirect_uri: OAUTH_REDIRECT_URI,\n      grant_type: \"authorization_code\",\n    }),\n  });\n\n  const data = await response.json();\n  localStorage.setItem(\"gmail_refresh_token\", data.refresh_token);\n  return data.access_token;\n}\n\n// Check if we have valid credentials\nasync function hasValidCredentials() {\n  try {\n    const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n    return !!refreshToken;\n  } catch (error) {\n    console.error(\"Error checking credentials:\", error);\n    return false;\n  }\n}\n\nasync function startOAuthFlow() {\n  const credentials = await loadOAuthCredentials();\n\n  // Store current path for return after auth\n  localStorage.setItem(\"emailAuthReturnTo\", window.location.pathname);\n\n  // Build the OAuth URL\n  const authUrl = new URL(\"https://accounts.google.com/o/oauth2/v2/auth\");\n  authUrl.searchParams.append(\"client_id\", credentials.web.client_id);\n  authUrl.searchParams.append(\"redirect_uri\", OAUTH_REDIRECT_URI);\n  authUrl.searchParams.append(\"response_type\", \"code\");\n  authUrl.searchParams.append(\n    \"scope\",\n    \"https://www.googleapis.com/auth/gmail.send\"\n  );\n  authUrl.searchParams.append(\"access_type\", \"offline\");\n  authUrl.searchParams.append(\"prompt\", \"consent\");\n\n  // Redirect to Google's OAuth page\n  window.location.href = authUrl.toString();\n}\n\n// Export the sendEmail function\nexport async function sendEmail(to, subject, body) {\n  try {\n    // First check if we have valid credentials\n    const hasCredentials = await hasValidCredentials();\n    if (!hasCredentials) {\n      console.log(\"No valid credentials found, starting OAuth flow\");\n      await startOAuthFlow();\n      return; // The page will redirect to Google OAuth\n    }\n\n    // If we have credentials, proceed with sending email\n    const accessToken = await getAccessToken();\n    if (!accessToken) {\n      throw new Error(\"Could not get access token - authentication required\");\n    }\n\n    // Log the raw data we received\n    console.log(\"Raw email data:\", {\n      to: to,\n      subject: subject,\n      message: body,\n    });\n\n    // Create email message\n    const message = createMessage(to, subject, body);\n\n    // Log the formatted message before encoding\n    const decodedMessage = atob(message);\n    console.log(\"Formatted email before sending:\", decodedMessage);\n\n    // Send email using Gmail API with your email address\n    const response = await fetch(\n      `https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(\n        SENDER_EMAIL\n      )}/messages/send`,\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ raw: message }),\n      }\n    );\n\n    const responseText = await response.text();\n    console.log(\"Gmail API response:\", response.status, responseText);\n\n    if (!response.ok) {\n      console.error(\"Gmail API error response:\", responseText);\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(errorData.error?.message || \"Failed to send email\");\n      } catch (e) {\n        throw new Error(\"Failed to send email: \" + responseText);\n      }\n    }\n\n    // Only return success if we get a message ID back\n    try {\n      const responseData = JSON.parse(responseText);\n      if (!responseData.id) {\n        throw new Error(\"No message ID in response\");\n      }\n      return {\n        success: true,\n        messageId: responseData.id,\n        message: \"Email sent successfully and confirmed by Gmail\",\n      };\n    } catch (e) {\n      throw new Error(\"Could not confirm email was sent: \" + responseText);\n    }\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw error;\n  }\n}\n\nfunction createMessage(recipientEmails, subject, messageText) {\n  // Format the email headers properly\n  const headers = {\n    \"MIME-Version\": \"1.0\",\n    \"Content-Type\": 'text/plain; charset=\"UTF-8\"',\n    \"Content-Transfer-Encoding\": \"7bit\",\n    From: SENDER_EMAIL,\n    To: recipientEmails.join(\",\"),\n    Subject: subject,\n  };\n\n  // Build the email with proper headers\n  const email =\n    Object.entries(headers)\n      .map(([key, value]) => `${key}: ${value}`)\n      .join(\"\\r\\n\") +\n    \"\\r\\n\\r\\n\" +\n    messageText;\n\n  // Base64URL encode the email\n  const base64Email = btoa(email)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  console.log(\"Created email:\", {\n    headers,\n    messageText,\n    encodedLength: base64Email.length,\n  });\n\n  return base64Email;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}