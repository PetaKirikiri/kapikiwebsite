{"ast":null,"code":"import credentials from \"../emailtoken.json\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\nasync function createJWT() {\n  const now = Math.floor(Date.now() / 1000);\n  const header = {\n    alg: \"RS256\",\n    typ: \"JWT\",\n    kid: credentials.private_key_id\n  };\n  const payload = {\n    iss: credentials.client_email,\n    scope: \"https://www.googleapis.com/auth/gmail.send\",\n    aud: credentials.token_uri,\n    exp: now + 3600,\n    iat: now\n  };\n  const encodedHeader = btoa(JSON.stringify(header)).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  const encodedPayload = btoa(JSON.stringify(payload)).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  const privateKeyBuffer = new TextEncoder().encode(credentials.private_key);\n  const key = await crypto.subtle.importKey(\"pkcs8\", privateKeyBuffer, {\n    name: \"RSASSA-PKCS1-v1_5\",\n    hash: {\n      name: \"SHA-256\"\n    }\n  }, false, [\"sign\"]);\n  const signature = await crypto.subtle.sign({\n    name: \"RSASSA-PKCS1-v1_5\",\n    hash: {\n      name: \"SHA-256\"\n    }\n  }, key, new TextEncoder().encode(`${encodedHeader}.${encodedPayload}`));\n  const encodedSignature = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  return `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n}\nfunction createMessage(to, bcc, subject, messageText) {\n  const str = [\"From: \" + SENDER_EMAIL, \"To: \" + to, \"Bcc: \" + bcc.join(\",\"), \"Subject: \" + subject, \"\", messageText].join(\"\\n\");\n  const encodedMessage = btoa(str).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  return encodedMessage;\n}\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    const message = createMessage(SENDER_EMAIL, recipientEmails, subject, messageText);\n\n    // Get the access token using the service account\n    const tokenResponse = await fetch(credentials.token_uri, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: new URLSearchParams({\n        grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n        assertion: await createJWT()\n      })\n    });\n    if (!tokenResponse.ok) {\n      var _errorData$error;\n      const errorData = await tokenResponse.json();\n      throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || \"Failed to get access token\");\n    }\n    const {\n      access_token\n    } = await tokenResponse.json();\n    const response = await fetch(\"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${access_token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        raw: message\n      })\n    });\n    if (!response.ok) {\n      var _errorData$error2;\n      const errorData = await response.json();\n      throw new Error(((_errorData$error2 = errorData.error) === null || _errorData$error2 === void 0 ? void 0 : _errorData$error2.message) || \"Failed to send email\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw new Error(\"Failed to send email. Please ensure you're properly authenticated with Gmail.\");\n  }\n}","map":{"version":3,"names":["credentials","SENDER_EMAIL","createJWT","now","Math","floor","Date","header","alg","typ","kid","private_key_id","payload","iss","client_email","scope","aud","token_uri","exp","iat","encodedHeader","btoa","JSON","stringify","replace","encodedPayload","privateKeyBuffer","TextEncoder","encode","private_key","key","crypto","subtle","importKey","name","hash","signature","sign","encodedSignature","String","fromCharCode","Uint8Array","createMessage","to","bcc","subject","messageText","str","join","encodedMessage","sendEmail","recipientEmails","message","tokenResponse","fetch","method","headers","body","URLSearchParams","grant_type","assertion","ok","_errorData$error","errorData","json","Error","error","access_token","response","Authorization","raw","_errorData$error2","console"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/emailService.js"],"sourcesContent":["import credentials from \"../emailtoken.json\";\n\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\nasync function createJWT() {\n  const now = Math.floor(Date.now() / 1000);\n\n  const header = {\n    alg: \"RS256\",\n    typ: \"JWT\",\n    kid: credentials.private_key_id,\n  };\n\n  const payload = {\n    iss: credentials.client_email,\n    scope: \"https://www.googleapis.com/auth/gmail.send\",\n    aud: credentials.token_uri,\n    exp: now + 3600,\n    iat: now,\n  };\n\n  const encodedHeader = btoa(JSON.stringify(header))\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n  const encodedPayload = btoa(JSON.stringify(payload))\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  const privateKeyBuffer = new TextEncoder().encode(credentials.private_key);\n  const key = await crypto.subtle.importKey(\n    \"pkcs8\",\n    privateKeyBuffer,\n    { name: \"RSASSA-PKCS1-v1_5\", hash: { name: \"SHA-256\" } },\n    false,\n    [\"sign\"]\n  );\n\n  const signature = await crypto.subtle.sign(\n    { name: \"RSASSA-PKCS1-v1_5\", hash: { name: \"SHA-256\" } },\n    key,\n    new TextEncoder().encode(`${encodedHeader}.${encodedPayload}`)\n  );\n\n  const encodedSignature = btoa(\n    String.fromCharCode(...new Uint8Array(signature))\n  )\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  return `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n}\n\nfunction createMessage(to, bcc, subject, messageText) {\n  const str = [\n    \"From: \" + SENDER_EMAIL,\n    \"To: \" + to,\n    \"Bcc: \" + bcc.join(\",\"),\n    \"Subject: \" + subject,\n    \"\",\n    messageText,\n  ].join(\"\\n\");\n\n  const encodedMessage = btoa(str)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  return encodedMessage;\n}\n\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    const message = createMessage(\n      SENDER_EMAIL,\n      recipientEmails,\n      subject,\n      messageText\n    );\n\n    // Get the access token using the service account\n    const tokenResponse = await fetch(credentials.token_uri, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: new URLSearchParams({\n        grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n        assertion: await createJWT(),\n      }),\n    });\n\n    if (!tokenResponse.ok) {\n      const errorData = await tokenResponse.json();\n      throw new Error(errorData.error?.message || \"Failed to get access token\");\n    }\n\n    const { access_token } = await tokenResponse.json();\n\n    const response = await fetch(\n      \"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\",\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${access_token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          raw: message,\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error?.message || \"Failed to send email\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw new Error(\n      \"Failed to send email. Please ensure you're properly authenticated with Gmail.\"\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}