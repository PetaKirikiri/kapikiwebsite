{"ast":null,"code":"import { auth } from \"../firebase\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\nconst SERVICE_ACCOUNT_EMAIL = \"kapiki-email-service@friendly-cargo-453820-h2.iam.gserviceaccount.com\";\nasync function createJWT() {\n  const header = {\n    alg: \"RS256\",\n    typ: \"JWT\",\n    kid: \"248488355de241a90e722e0cea6b5bd8f4a21095\"\n  };\n  const now = Math.floor(Date.now() / 1000);\n  const payload = {\n    iss: SERVICE_ACCOUNT_EMAIL,\n    scope: \"https://www.googleapis.com/auth/gmail.send\",\n    aud: \"https://oauth2.googleapis.com/token\",\n    exp: now + 3600,\n    iat: now\n  };\n  const encodedHeader = btoa(JSON.stringify(header)).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  const encodedPayload = btoa(JSON.stringify(payload)).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n\n  // Note: In a real implementation, you would sign this with the private key\n  // For security, this should be done on a backend server\n  return `${encodedHeader}.${encodedPayload}`;\n}\nfunction createMessage(to, bcc, subject, messageText) {\n  const str = [\"From: \" + SENDER_EMAIL, \"To: \" + to, \"Bcc: \" + bcc.join(\",\"), \"Subject: \" + subject, \"\", messageText].join(\"\\n\");\n  const encodedMessage = btoa(str).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  return encodedMessage;\n}\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    const message = createMessage(SENDER_EMAIL, recipientEmails, subject, messageText);\n\n    // Get the access token using the service account\n    const tokenResponse = await fetch(\"https://oauth2.googleapis.com/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: new URLSearchParams({\n        grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n        assertion: await createJWT()\n      })\n    });\n    if (!tokenResponse.ok) {\n      throw new Error(\"Failed to get access token\");\n    }\n    const {\n      access_token\n    } = await tokenResponse.json();\n    const response = await fetch(\"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${access_token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        raw: message\n      })\n    });\n    if (!response.ok) {\n      var _errorData$error;\n      const errorData = await response.json();\n      throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || \"Failed to send email\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw new Error(\"Failed to send email. Please ensure you're properly authenticated with Gmail.\");\n  }\n}","map":{"version":3,"names":["auth","SENDER_EMAIL","SERVICE_ACCOUNT_EMAIL","createJWT","header","alg","typ","kid","now","Math","floor","Date","payload","iss","scope","aud","exp","iat","encodedHeader","btoa","JSON","stringify","replace","encodedPayload","createMessage","to","bcc","subject","messageText","str","join","encodedMessage","sendEmail","recipientEmails","message","tokenResponse","fetch","method","headers","body","URLSearchParams","grant_type","assertion","ok","Error","access_token","json","response","Authorization","raw","_errorData$error","errorData","error","console"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/emailService.js"],"sourcesContent":["import { auth } from \"../firebase\";\n\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\nconst SERVICE_ACCOUNT_EMAIL =\n  \"kapiki-email-service@friendly-cargo-453820-h2.iam.gserviceaccount.com\";\n\nasync function createJWT() {\n  const header = {\n    alg: \"RS256\",\n    typ: \"JWT\",\n    kid: \"248488355de241a90e722e0cea6b5bd8f4a21095\",\n  };\n\n  const now = Math.floor(Date.now() / 1000);\n  const payload = {\n    iss: SERVICE_ACCOUNT_EMAIL,\n    scope: \"https://www.googleapis.com/auth/gmail.send\",\n    aud: \"https://oauth2.googleapis.com/token\",\n    exp: now + 3600,\n    iat: now,\n  };\n\n  const encodedHeader = btoa(JSON.stringify(header))\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n  const encodedPayload = btoa(JSON.stringify(payload))\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  // Note: In a real implementation, you would sign this with the private key\n  // For security, this should be done on a backend server\n  return `${encodedHeader}.${encodedPayload}`;\n}\n\nfunction createMessage(to, bcc, subject, messageText) {\n  const str = [\n    \"From: \" + SENDER_EMAIL,\n    \"To: \" + to,\n    \"Bcc: \" + bcc.join(\",\"),\n    \"Subject: \" + subject,\n    \"\",\n    messageText,\n  ].join(\"\\n\");\n\n  const encodedMessage = btoa(str)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  return encodedMessage;\n}\n\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    const message = createMessage(\n      SENDER_EMAIL,\n      recipientEmails,\n      subject,\n      messageText\n    );\n\n    // Get the access token using the service account\n    const tokenResponse = await fetch(\"https://oauth2.googleapis.com/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: new URLSearchParams({\n        grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n        assertion: await createJWT(),\n      }),\n    });\n\n    if (!tokenResponse.ok) {\n      throw new Error(\"Failed to get access token\");\n    }\n\n    const { access_token } = await tokenResponse.json();\n\n    const response = await fetch(\n      \"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\",\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${access_token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          raw: message,\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error?.message || \"Failed to send email\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw new Error(\n      \"Failed to send email. Please ensure you're properly authenticated with Gmail.\"\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}