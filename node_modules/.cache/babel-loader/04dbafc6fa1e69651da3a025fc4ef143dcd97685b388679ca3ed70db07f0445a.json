{"ast":null,"code":"import { getAuth } from \"firebase/auth\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\nfunction createMessage(to, bcc, subject, messageText) {\n  const str = [\"From: \" + SENDER_EMAIL, \"To: \" + to, \"Bcc: \" + bcc.join(\",\"), \"Subject: \" + subject, \"\", messageText].join(\"\\n\");\n  const encodedMessage = btoa(str).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  return encodedMessage;\n}\nasync function getAccessToken() {\n  const auth = getAuth();\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"User not authenticated\");\n  }\n  return await user.getIdToken();\n}\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    const raw = createMessage(SENDER_EMAIL, recipientEmails, subject, messageText);\n    const token = await getAccessToken();\n    const response = await fetch(\"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        raw: raw\n      })\n    });\n    if (!response.ok) {\n      var _errorData$error;\n      const errorData = await response.json();\n      throw new Error(`Failed to send email: ${((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || response.statusText}`);\n    }\n    const data = await response.json();\n    return {\n      success: true,\n      messageId: data.id\n    };\n  } catch (error) {\n    console.error(\"Failed to send email:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["getAuth","SENDER_EMAIL","createMessage","to","bcc","subject","messageText","str","join","encodedMessage","btoa","replace","getAccessToken","auth","user","currentUser","Error","getIdToken","sendEmail","recipientEmails","raw","token","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","_errorData$error","errorData","json","error","message","statusText","data","success","messageId","id","console"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/emailService.js"],"sourcesContent":["import { getAuth } from \"firebase/auth\";\n\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\nfunction createMessage(to, bcc, subject, messageText) {\n  const str = [\n    \"From: \" + SENDER_EMAIL,\n    \"To: \" + to,\n    \"Bcc: \" + bcc.join(\",\"),\n    \"Subject: \" + subject,\n    \"\",\n    messageText,\n  ].join(\"\\n\");\n\n  const encodedMessage = btoa(str)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  return encodedMessage;\n}\n\nasync function getAccessToken() {\n  const auth = getAuth();\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"User not authenticated\");\n  }\n  return await user.getIdToken();\n}\n\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    const raw = createMessage(\n      SENDER_EMAIL,\n      recipientEmails,\n      subject,\n      messageText\n    );\n\n    const token = await getAccessToken();\n\n    const response = await fetch(\n      \"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\",\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          raw: raw,\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(\n        `Failed to send email: ${\n          errorData.error?.message || response.statusText\n        }`\n      );\n    }\n\n    const data = await response.json();\n    return { success: true, messageId: data.id };\n  } catch (error) {\n    console.error(\"Failed to send email:\", error);\n    throw error;\n  }\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,eAAe;AAEvC,MAAMC,YAAY,GAAG,mBAAmB;AAExC,SAASC,aAAaA,CAACC,EAAE,EAAEC,GAAG,EAAEC,OAAO,EAAEC,WAAW,EAAE;EACpD,MAAMC,GAAG,GAAG,CACV,QAAQ,GAAGN,YAAY,EACvB,MAAM,GAAGE,EAAE,EACX,OAAO,GAAGC,GAAG,CAACI,IAAI,CAAC,GAAG,CAAC,EACvB,WAAW,GAAGH,OAAO,EACrB,EAAE,EACFC,WAAW,CACZ,CAACE,IAAI,CAAC,IAAI,CAAC;EAEZ,MAAMC,cAAc,GAAGC,IAAI,CAACH,GAAG,CAAC,CAC7BI,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAErB,OAAOF,cAAc;AACvB;AAEA,eAAeG,cAAcA,CAAA,EAAG;EAC9B,MAAMC,IAAI,GAAGb,OAAO,CAAC,CAAC;EACtB,MAAMc,IAAI,GAAGD,IAAI,CAACE,WAAW;EAC7B,IAAI,CAACD,IAAI,EAAE;IACT,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACA,OAAO,MAAMF,IAAI,CAACG,UAAU,CAAC,CAAC;AAChC;AAEA,OAAO,eAAeC,SAASA,CAACC,eAAe,EAAEd,OAAO,EAAEC,WAAW,EAAE;EACrE,IAAI;IACF,MAAMc,GAAG,GAAGlB,aAAa,CACvBD,YAAY,EACZkB,eAAe,EACfd,OAAO,EACPC,WACF,CAAC;IAED,MAAMe,KAAK,GAAG,MAAMT,cAAc,CAAC,CAAC;IAEpC,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8DAA8D,EAC9D;MACEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUL,KAAK,EAAE;QAChC,cAAc,EAAE;MAClB,CAAC;MACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBT,GAAG,EAAEA;MACP,CAAC;IACH,CACF,CAAC;IAED,IAAI,CAACE,QAAQ,CAACQ,EAAE,EAAE;MAAA,IAAAC,gBAAA;MAChB,MAAMC,SAAS,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIjB,KAAK,CACb,yBACE,EAAAe,gBAAA,GAAAC,SAAS,CAACE,KAAK,cAAAH,gBAAA,uBAAfA,gBAAA,CAAiBI,OAAO,KAAIb,QAAQ,CAACc,UAAU,EAEnD,CAAC;IACH;IAEA,MAAMC,IAAI,GAAG,MAAMf,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC,OAAO;MAAEK,OAAO,EAAE,IAAI;MAAEC,SAAS,EAAEF,IAAI,CAACG;IAAG,CAAC;EAC9C,CAAC,CAAC,OAAON,KAAK,EAAE;IACdO,OAAO,CAACP,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}