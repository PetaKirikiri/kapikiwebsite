{"ast":null,"code":"import { auth } from \"../firebase\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\nconst SERVICE_ACCOUNT_EMAIL = \"kapiki-email-service@friendly-cargo-453820-h2.iam.gserviceaccount.com\";\nfunction createMessage(to, bcc, subject, messageText) {\n  const str = [\"From: \" + SENDER_EMAIL, \"To: \" + to, \"Bcc: \" + bcc.join(\",\"), \"Subject: \" + subject, \"\", messageText].join(\"\\n\");\n  const encodedMessage = btoa(str).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  return encodedMessage;\n}\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    const message = createMessage(SENDER_EMAIL, recipientEmails, subject, messageText);\n\n    // Get the access token using the service account\n    const tokenResponse = await fetch(\"https://oauth2.googleapis.com/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: new URLSearchParams({\n        grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n        assertion: await createJWT()\n      })\n    });\n    if (!tokenResponse.ok) {\n      throw new Error(\"Failed to get access token\");\n    }\n    const {\n      access_token\n    } = await tokenResponse.json();\n    const response = await fetch(\"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${access_token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        raw: message\n      })\n    });\n    if (!response.ok) {\n      var _errorData$error;\n      const errorData = await response.json();\n      throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || \"Failed to send email\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw new Error(\"Failed to send email. Please ensure you're properly authenticated with Gmail.\");\n  }\n}","map":{"version":3,"names":["auth","SENDER_EMAIL","SERVICE_ACCOUNT_EMAIL","createMessage","to","bcc","subject","messageText","str","join","encodedMessage","btoa","replace","sendEmail","recipientEmails","message","tokenResponse","fetch","method","headers","body","URLSearchParams","grant_type","assertion","createJWT","ok","Error","access_token","json","response","Authorization","JSON","stringify","raw","_errorData$error","errorData","error","console"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/emailService.js"],"sourcesContent":["import { auth } from \"../firebase\";\n\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\nconst SERVICE_ACCOUNT_EMAIL =\n  \"kapiki-email-service@friendly-cargo-453820-h2.iam.gserviceaccount.com\";\n\nfunction createMessage(to, bcc, subject, messageText) {\n  const str = [\n    \"From: \" + SENDER_EMAIL,\n    \"To: \" + to,\n    \"Bcc: \" + bcc.join(\",\"),\n    \"Subject: \" + subject,\n    \"\",\n    messageText,\n  ].join(\"\\n\");\n\n  const encodedMessage = btoa(str)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  return encodedMessage;\n}\n\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    const message = createMessage(\n      SENDER_EMAIL,\n      recipientEmails,\n      subject,\n      messageText\n    );\n\n    // Get the access token using the service account\n    const tokenResponse = await fetch(\"https://oauth2.googleapis.com/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: new URLSearchParams({\n        grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n        assertion: await createJWT(),\n      }),\n    });\n\n    if (!tokenResponse.ok) {\n      throw new Error(\"Failed to get access token\");\n    }\n\n    const { access_token } = await tokenResponse.json();\n\n    const response = await fetch(\n      \"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\",\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${access_token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          raw: message,\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error?.message || \"Failed to send email\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw new Error(\n      \"Failed to send email. Please ensure you're properly authenticated with Gmail.\"\n    );\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,aAAa;AAElC,MAAMC,YAAY,GAAG,mBAAmB;AACxC,MAAMC,qBAAqB,GACzB,uEAAuE;AAEzE,SAASC,aAAaA,CAACC,EAAE,EAAEC,GAAG,EAAEC,OAAO,EAAEC,WAAW,EAAE;EACpD,MAAMC,GAAG,GAAG,CACV,QAAQ,GAAGP,YAAY,EACvB,MAAM,GAAGG,EAAE,EACX,OAAO,GAAGC,GAAG,CAACI,IAAI,CAAC,GAAG,CAAC,EACvB,WAAW,GAAGH,OAAO,EACrB,EAAE,EACFC,WAAW,CACZ,CAACE,IAAI,CAAC,IAAI,CAAC;EAEZ,MAAMC,cAAc,GAAGC,IAAI,CAACH,GAAG,CAAC,CAC7BI,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAErB,OAAOF,cAAc;AACvB;AAEA,OAAO,eAAeG,SAASA,CAACC,eAAe,EAAER,OAAO,EAAEC,WAAW,EAAE;EACrE,IAAI;IACF,MAAMQ,OAAO,GAAGZ,aAAa,CAC3BF,YAAY,EACZa,eAAe,EACfR,OAAO,EACPC,WACF,CAAC;;IAED;IACA,MAAMS,aAAa,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;MACvEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAE,IAAIC,eAAe,CAAC;QACxBC,UAAU,EAAE,6CAA6C;QACzDC,SAAS,EAAE,MAAMC,SAAS,CAAC;MAC7B,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACR,aAAa,CAACS,EAAE,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IAEA,MAAM;MAAEC;IAAa,CAAC,GAAG,MAAMX,aAAa,CAACY,IAAI,CAAC,CAAC;IAEnD,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAC1B,8DAA8D,EAC9D;MACEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPW,aAAa,EAAE,UAAUH,YAAY,EAAE;QACvC,cAAc,EAAE;MAClB,CAAC;MACDP,IAAI,EAAEW,IAAI,CAACC,SAAS,CAAC;QACnBC,GAAG,EAAElB;MACP,CAAC;IACH,CACF,CAAC;IAED,IAAI,CAACc,QAAQ,CAACJ,EAAE,EAAE;MAAA,IAAAS,gBAAA;MAChB,MAAMC,SAAS,GAAG,MAAMN,QAAQ,CAACD,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIF,KAAK,CAAC,EAAAQ,gBAAA,GAAAC,SAAS,CAACC,KAAK,cAAAF,gBAAA,uBAAfA,gBAAA,CAAiBnB,OAAO,KAAI,sBAAsB,CAAC;IACrE;IAEA,OAAO,MAAMc,QAAQ,CAACD,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAM,IAAIV,KAAK,CACb,+EACF,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}