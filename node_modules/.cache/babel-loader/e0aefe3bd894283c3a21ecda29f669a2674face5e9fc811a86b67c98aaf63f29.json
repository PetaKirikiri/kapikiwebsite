{"ast":null,"code":"import { auth } from \"../firebase\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\nasync function getServiceAccountCredentials() {\n  try {\n    const response = await fetch(\"/emailtoken.json\");\n    if (!response.ok) {\n      throw new Error(\"Failed to load service account credentials\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error loading service account credentials:\", error);\n    throw error;\n  }\n}\nasync function createJWT() {\n  const credentials = await getServiceAccountCredentials();\n  const header = {\n    alg: \"RS256\",\n    typ: \"JWT\",\n    kid: credentials.private_key_id\n  };\n  const now = Math.floor(Date.now() / 1000);\n  const payload = {\n    iss: credentials.client_email,\n    scope: \"https://www.googleapis.com/auth/gmail.send\",\n    aud: \"https://oauth2.googleapis.com/token\",\n    exp: now + 3600,\n    iat: now\n  };\n  const encodedHeader = btoa(JSON.stringify(header)).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  const encodedPayload = btoa(JSON.stringify(payload)).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  const privateKeyBuffer = pemToArrayBuffer(credentials.private_key);\n  const key = await crypto.subtle.importKey(\"pkcs8\", privateKeyBuffer, {\n    name: \"RSASSA-PKCS1-v1_5\",\n    hash: {\n      name: \"SHA-256\"\n    }\n  }, false, [\"sign\"]);\n  const signature = await crypto.subtle.sign({\n    name: \"RSASSA-PKCS1-v1_5\",\n    hash: {\n      name: \"SHA-256\"\n    }\n  }, key, new TextEncoder().encode(`${encodedHeader}.${encodedPayload}`));\n  const encodedSignature = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  return `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n}\nfunction pemToArrayBuffer(pem) {\n  const base64 = pem.replace(\"-----BEGIN PRIVATE KEY-----\", \"\").replace(\"-----END PRIVATE KEY-----\", \"\").replace(/\\n/g, \"\");\n  const binaryString = atob(base64);\n  const bytes = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\nfunction createMessage(to, bcc, subject, messageText) {\n  const str = [\"From: \" + SENDER_EMAIL, \"To: \" + to, \"Bcc: \" + bcc.join(\",\"), \"Subject: \" + subject, \"\", messageText].join(\"\\n\");\n  const encodedMessage = btoa(str).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  return encodedMessage;\n}\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    const message = createMessage(SENDER_EMAIL, recipientEmails, subject, messageText);\n\n    // Get the access token using the service account\n    const tokenResponse = await fetch(\"https://oauth2.googleapis.com/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: new URLSearchParams({\n        grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n        assertion: await createJWT()\n      })\n    });\n    if (!tokenResponse.ok) {\n      var _errorData$error;\n      const errorData = await tokenResponse.json();\n      throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || \"Failed to get access token\");\n    }\n    const {\n      access_token\n    } = await tokenResponse.json();\n    const response = await fetch(\"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${access_token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        raw: message\n      })\n    });\n    if (!response.ok) {\n      var _errorData$error2;\n      const errorData = await response.json();\n      throw new Error(((_errorData$error2 = errorData.error) === null || _errorData$error2 === void 0 ? void 0 : _errorData$error2.message) || \"Failed to send email\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw new Error(\"Failed to send email. Please ensure you're properly authenticated with Gmail.\");\n  }\n}","map":{"version":3,"names":["auth","SENDER_EMAIL","getServiceAccountCredentials","response","fetch","ok","Error","json","error","console","createJWT","credentials","header","alg","typ","kid","private_key_id","now","Math","floor","Date","payload","iss","client_email","scope","aud","exp","iat","encodedHeader","btoa","JSON","stringify","replace","encodedPayload","privateKeyBuffer","pemToArrayBuffer","private_key","key","crypto","subtle","importKey","name","hash","signature","sign","TextEncoder","encode","encodedSignature","String","fromCharCode","Uint8Array","pem","base64","binaryString","atob","bytes","length","i","charCodeAt","buffer","createMessage","to","bcc","subject","messageText","str","join","encodedMessage","sendEmail","recipientEmails","message","tokenResponse","method","headers","body","URLSearchParams","grant_type","assertion","_errorData$error","errorData","access_token","Authorization","raw","_errorData$error2"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/emailService.js"],"sourcesContent":["import { auth } from \"../firebase\";\n\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\nasync function getServiceAccountCredentials() {\n  try {\n    const response = await fetch(\"/emailtoken.json\");\n    if (!response.ok) {\n      throw new Error(\"Failed to load service account credentials\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error loading service account credentials:\", error);\n    throw error;\n  }\n}\n\nasync function createJWT() {\n  const credentials = await getServiceAccountCredentials();\n\n  const header = {\n    alg: \"RS256\",\n    typ: \"JWT\",\n    kid: credentials.private_key_id,\n  };\n\n  const now = Math.floor(Date.now() / 1000);\n  const payload = {\n    iss: credentials.client_email,\n    scope: \"https://www.googleapis.com/auth/gmail.send\",\n    aud: \"https://oauth2.googleapis.com/token\",\n    exp: now + 3600,\n    iat: now,\n  };\n\n  const encodedHeader = btoa(JSON.stringify(header))\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n  const encodedPayload = btoa(JSON.stringify(payload))\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  const privateKeyBuffer = pemToArrayBuffer(credentials.private_key);\n  const key = await crypto.subtle.importKey(\n    \"pkcs8\",\n    privateKeyBuffer,\n    { name: \"RSASSA-PKCS1-v1_5\", hash: { name: \"SHA-256\" } },\n    false,\n    [\"sign\"]\n  );\n\n  const signature = await crypto.subtle.sign(\n    { name: \"RSASSA-PKCS1-v1_5\", hash: { name: \"SHA-256\" } },\n    key,\n    new TextEncoder().encode(`${encodedHeader}.${encodedPayload}`)\n  );\n\n  const encodedSignature = btoa(\n    String.fromCharCode(...new Uint8Array(signature))\n  )\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  return `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n}\n\nfunction pemToArrayBuffer(pem) {\n  const base64 = pem\n    .replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n    .replace(\"-----END PRIVATE KEY-----\", \"\")\n    .replace(/\\n/g, \"\");\n  const binaryString = atob(base64);\n  const bytes = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n\nfunction createMessage(to, bcc, subject, messageText) {\n  const str = [\n    \"From: \" + SENDER_EMAIL,\n    \"To: \" + to,\n    \"Bcc: \" + bcc.join(\",\"),\n    \"Subject: \" + subject,\n    \"\",\n    messageText,\n  ].join(\"\\n\");\n\n  const encodedMessage = btoa(str)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  return encodedMessage;\n}\n\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    const message = createMessage(\n      SENDER_EMAIL,\n      recipientEmails,\n      subject,\n      messageText\n    );\n\n    // Get the access token using the service account\n    const tokenResponse = await fetch(\"https://oauth2.googleapis.com/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: new URLSearchParams({\n        grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n        assertion: await createJWT(),\n      }),\n    });\n\n    if (!tokenResponse.ok) {\n      const errorData = await tokenResponse.json();\n      throw new Error(errorData.error?.message || \"Failed to get access token\");\n    }\n\n    const { access_token } = await tokenResponse.json();\n\n    const response = await fetch(\n      \"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\",\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${access_token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          raw: message,\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error?.message || \"Failed to send email\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw new Error(\n      \"Failed to send email. Please ensure you're properly authenticated with Gmail.\"\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}