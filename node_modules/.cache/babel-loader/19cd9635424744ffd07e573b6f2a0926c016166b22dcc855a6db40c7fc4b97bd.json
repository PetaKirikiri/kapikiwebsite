{"ast":null,"code":"// We'll load the OAuth credentials from the file\nlet oauthCredentials = null;\n\n// Get the base URL considering the basename\nconst getBaseUrl = () => {\n  return \"/kapikiwebsite\"; // Always use /kapikiwebsite for consistency\n};\n\n// Use the base URL for the redirect URI\nconst OAUTH_REDIRECT_URI = window.location.origin + getBaseUrl() + \"/oauth-callback\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\nasync function loadOAuthCredentials() {\n  if (oauthCredentials) return oauthCredentials;\n  try {\n    // Use process.env.PUBLIC_URL to get the correct public path\n    const credentialsPath = `${getBaseUrl()}/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json`;\n    console.log(\"Trying to load credentials from:\", credentialsPath);\n    const response = await fetch(credentialsPath);\n    if (!response.ok) {\n      const text = await response.text();\n      console.error(\"Failed to load credentials. Response:\", {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        text: text.substring(0, 100) + \"...\"\n      });\n      throw new Error(`Could not load OAuth credentials (${response.status}). Check if the file exists in the public folder.`);\n    }\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      throw new Error(`Wrong file type received: ${contentType}. Expected JSON. Make sure the file exists in the public folder.`);\n    }\n    oauthCredentials = await response.json();\n    console.log(\"Successfully loaded OAuth credentials\");\n    return oauthCredentials;\n  } catch (error) {\n    console.error(\"Error loading OAuth credentials:\", error);\n    throw new Error(`Failed to load email settings: ${error.message}. Make sure the client_secret file is in the public folder.`);\n  }\n}\n\n// Function to start the OAuth flow\nasync function startOAuthFlow() {\n  console.log(\"Starting OAuth flow\");\n  const credentials = await loadOAuthCredentials();\n\n  // Store current path for return after auth\n  const currentPath = window.location.pathname.replace(getBaseUrl(), \"\") || \"/clients\";\n  console.log(\"Storing return path:\", currentPath);\n  localStorage.setItem(\"emailAuthReturnTo\", currentPath);\n\n  // Build the OAuth URL\n  const authUrl = new URL(\"https://accounts.google.com/o/oauth2/v2/auth\");\n  authUrl.searchParams.append(\"client_id\", credentials.web.client_id);\n  authUrl.searchParams.append(\"redirect_uri\", OAUTH_REDIRECT_URI);\n  authUrl.searchParams.append(\"response_type\", \"code\");\n  authUrl.searchParams.append(\"scope\", \"https://www.googleapis.com/auth/gmail.send\");\n  authUrl.searchParams.append(\"access_type\", \"offline\");\n  authUrl.searchParams.append(\"prompt\", \"consent\");\n  console.log(\"Redirecting to OAuth URL:\", authUrl.toString());\n  // Redirect to Google's OAuth page\n  window.location.href = authUrl.toString();\n}\n\n// Function to get access token using the refresh token\nasync function getAccessToken() {\n  const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n  if (!refreshToken) {\n    console.log(\"No refresh token found, starting OAuth flow\");\n    startOAuthFlow();\n    return null;\n  }\n  console.log(\"Getting access token with refresh token\");\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\"\n    })\n  });\n  if (!response.ok) {\n    console.log(\"Refresh token invalid, starting new OAuth flow\");\n    localStorage.removeItem(\"gmail_refresh_token\");\n    startOAuthFlow();\n    return null;\n  }\n  const data = await response.json();\n  console.log(\"Successfully got new access token\");\n  return data.access_token;\n}\nexport async function handleAuthCallback(code) {\n  console.log(\"handleAuthCallback: Starting to exchange code for tokens\");\n  try {\n    const credentials = await loadOAuthCredentials();\n    console.log(\"handleAuthCallback: Loaded credentials successfully\");\n    console.log(\"handleAuthCallback: About to make token exchange request\");\n    const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: new URLSearchParams({\n        code,\n        client_id: credentials.web.client_id,\n        client_secret: credentials.web.client_secret,\n        redirect_uri: OAUTH_REDIRECT_URI,\n        grant_type: \"authorization_code\"\n      })\n    });\n    console.log(\"handleAuthCallback: Token exchange response status:\", response.status);\n    const responseText = await response.text();\n    console.log(\"handleAuthCallback: Token exchange raw response:\", responseText);\n    let data;\n    try {\n      data = JSON.parse(responseText);\n      console.log(\"handleAuthCallback: Parsed response data:\", {\n        hasAccessToken: !!data.access_token,\n        hasRefreshToken: !!data.refresh_token,\n        tokenType: data.token_type,\n        expiresIn: data.expires_in\n      });\n    } catch (e) {\n      console.error(\"handleAuthCallback: Failed to parse response:\", e);\n      throw new Error(\"Failed to parse token response\");\n    }\n    if (!response.ok) {\n      console.error(\"handleAuthCallback: Token exchange failed:\", data.error_description || data.error);\n      throw new Error(data.error_description || data.error || \"Token exchange failed\");\n    }\n    if (!data.refresh_token) {\n      console.warn(\"handleAuthCallback: No refresh token in response\");\n    } else {\n      console.log(\"handleAuthCallback: Storing refresh token in localStorage\");\n      localStorage.setItem(\"gmail_refresh_token\", data.refresh_token);\n    }\n    return data.access_token;\n  } catch (error) {\n    console.error(\"handleAuthCallback: Error during token exchange:\", error);\n    throw error;\n  }\n}\n\n// Check if we have valid credentials\nasync function hasValidCredentials() {\n  try {\n    const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n    return !!refreshToken;\n  } catch (error) {\n    console.error(\"Error checking credentials:\", error);\n    return false;\n  }\n}\n\n// Export the sendEmail function\nexport async function sendEmail(to, subject, body) {\n  try {\n    // First check if we have valid credentials\n    const hasCredentials = await hasValidCredentials();\n    if (!hasCredentials) {\n      console.log(\"No valid credentials found, starting OAuth flow\");\n      await startOAuthFlow();\n      return; // The page will redirect to Google OAuth\n    }\n\n    // If we have credentials, proceed with sending email\n    const accessToken = await getAccessToken();\n    if (!accessToken) {\n      throw new Error(\"Could not get access token - authentication required\");\n    }\n\n    // Log the raw data we received\n    console.log(\"Raw email data:\", {\n      to: to,\n      subject: subject,\n      message: body\n    });\n\n    // Create email message\n    const message = createMessage(to, subject, body);\n\n    // Log the formatted message before encoding\n    const decodedMessage = atob(message);\n    console.log(\"Formatted email before sending:\", decodedMessage);\n\n    // Send email using Gmail API with your email address\n    const response = await fetch(`https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(SENDER_EMAIL)}/messages/send`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        raw: message\n      })\n    });\n    const responseText = await response.text();\n    console.log(\"Gmail API response:\", response.status, responseText);\n    if (!response.ok) {\n      console.error(\"Gmail API error response:\", responseText);\n      try {\n        var _errorData$error;\n        const errorData = JSON.parse(responseText);\n        throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || \"Failed to send email\");\n      } catch (e) {\n        throw new Error(\"Failed to send email: \" + responseText);\n      }\n    }\n\n    // Only return success if we get a message ID back\n    try {\n      const responseData = JSON.parse(responseText);\n      if (!responseData.id) {\n        throw new Error(\"No message ID in response\");\n      }\n      return {\n        success: true,\n        messageId: responseData.id,\n        message: \"Email sent successfully and confirmed by Gmail\"\n      };\n    } catch (e) {\n      throw new Error(\"Could not confirm email was sent: \" + responseText);\n    }\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw error;\n  }\n}\nfunction createMessage(recipientEmails, subject, messageText) {\n  // Format the email headers properly\n  const headers = {\n    \"MIME-Version\": \"1.0\",\n    \"Content-Type\": 'text/plain; charset=\"UTF-8\"',\n    \"Content-Transfer-Encoding\": \"7bit\",\n    From: SENDER_EMAIL,\n    To: recipientEmails.join(\",\"),\n    Subject: subject\n  };\n\n  // Build the email with proper headers\n  const email = Object.entries(headers).map(([key, value]) => `${key}: ${value}`).join(\"\\r\\n\") + \"\\r\\n\\r\\n\" + messageText;\n\n  // Base64URL encode the email\n  const base64Email = btoa(email).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  console.log(\"Created email:\", {\n    headers,\n    messageText,\n    encodedLength: base64Email.length\n  });\n  return base64Email;\n}","map":{"version":3,"names":["oauthCredentials","getBaseUrl","OAUTH_REDIRECT_URI","window","location","origin","SENDER_EMAIL","loadOAuthCredentials","credentialsPath","console","log","response","fetch","ok","text","error","status","statusText","url","substring","Error","contentType","headers","get","includes","json","message","startOAuthFlow","credentials","currentPath","pathname","replace","localStorage","setItem","authUrl","URL","searchParams","append","web","client_id","toString","href","getAccessToken","refreshToken","getItem","method","body","URLSearchParams","client_secret","refresh_token","grant_type","removeItem","data","access_token","handleAuthCallback","code","redirect_uri","responseText","JSON","parse","hasAccessToken","hasRefreshToken","tokenType","token_type","expiresIn","expires_in","e","error_description","warn","hasValidCredentials","sendEmail","to","subject","hasCredentials","accessToken","createMessage","decodedMessage","atob","encodeURIComponent","Authorization","stringify","raw","_errorData$error","errorData","responseData","id","success","messageId","recipientEmails","messageText","From","To","join","Subject","email","Object","entries","map","key","value","base64Email","btoa","encodedLength","length"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/emailService.js"],"sourcesContent":["// We'll load the OAuth credentials from the file\nlet oauthCredentials = null;\n\n// Get the base URL considering the basename\nconst getBaseUrl = () => {\n  return \"/kapikiwebsite\"; // Always use /kapikiwebsite for consistency\n};\n\n// Use the base URL for the redirect URI\nconst OAUTH_REDIRECT_URI =\n  window.location.origin + getBaseUrl() + \"/oauth-callback\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\nasync function loadOAuthCredentials() {\n  if (oauthCredentials) return oauthCredentials;\n\n  try {\n    // Use process.env.PUBLIC_URL to get the correct public path\n    const credentialsPath = `${getBaseUrl()}/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json`;\n\n    console.log(\"Trying to load credentials from:\", credentialsPath);\n\n    const response = await fetch(credentialsPath);\n\n    if (!response.ok) {\n      const text = await response.text();\n      console.error(\"Failed to load credentials. Response:\", {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        text: text.substring(0, 100) + \"...\",\n      });\n      throw new Error(\n        `Could not load OAuth credentials (${response.status}). Check if the file exists in the public folder.`\n      );\n    }\n\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      throw new Error(\n        `Wrong file type received: ${contentType}. Expected JSON. Make sure the file exists in the public folder.`\n      );\n    }\n\n    oauthCredentials = await response.json();\n    console.log(\"Successfully loaded OAuth credentials\");\n    return oauthCredentials;\n  } catch (error) {\n    console.error(\"Error loading OAuth credentials:\", error);\n    throw new Error(\n      `Failed to load email settings: ${error.message}. Make sure the client_secret file is in the public folder.`\n    );\n  }\n}\n\n// Function to start the OAuth flow\nasync function startOAuthFlow() {\n  console.log(\"Starting OAuth flow\");\n  const credentials = await loadOAuthCredentials();\n\n  // Store current path for return after auth\n  const currentPath =\n    window.location.pathname.replace(getBaseUrl(), \"\") || \"/clients\";\n  console.log(\"Storing return path:\", currentPath);\n  localStorage.setItem(\"emailAuthReturnTo\", currentPath);\n\n  // Build the OAuth URL\n  const authUrl = new URL(\"https://accounts.google.com/o/oauth2/v2/auth\");\n  authUrl.searchParams.append(\"client_id\", credentials.web.client_id);\n  authUrl.searchParams.append(\"redirect_uri\", OAUTH_REDIRECT_URI);\n  authUrl.searchParams.append(\"response_type\", \"code\");\n  authUrl.searchParams.append(\n    \"scope\",\n    \"https://www.googleapis.com/auth/gmail.send\"\n  );\n  authUrl.searchParams.append(\"access_type\", \"offline\");\n  authUrl.searchParams.append(\"prompt\", \"consent\");\n\n  console.log(\"Redirecting to OAuth URL:\", authUrl.toString());\n  // Redirect to Google's OAuth page\n  window.location.href = authUrl.toString();\n}\n\n// Function to get access token using the refresh token\nasync function getAccessToken() {\n  const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n  if (!refreshToken) {\n    console.log(\"No refresh token found, starting OAuth flow\");\n    startOAuthFlow();\n    return null;\n  }\n\n  console.log(\"Getting access token with refresh token\");\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: new URLSearchParams({\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\",\n    }),\n  });\n\n  if (!response.ok) {\n    console.log(\"Refresh token invalid, starting new OAuth flow\");\n    localStorage.removeItem(\"gmail_refresh_token\");\n    startOAuthFlow();\n    return null;\n  }\n\n  const data = await response.json();\n  console.log(\"Successfully got new access token\");\n  return data.access_token;\n}\n\nexport async function handleAuthCallback(code) {\n  console.log(\"handleAuthCallback: Starting to exchange code for tokens\");\n  try {\n    const credentials = await loadOAuthCredentials();\n    console.log(\"handleAuthCallback: Loaded credentials successfully\");\n\n    console.log(\"handleAuthCallback: About to make token exchange request\");\n    const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: new URLSearchParams({\n        code,\n        client_id: credentials.web.client_id,\n        client_secret: credentials.web.client_secret,\n        redirect_uri: OAUTH_REDIRECT_URI,\n        grant_type: \"authorization_code\",\n      }),\n    });\n\n    console.log(\n      \"handleAuthCallback: Token exchange response status:\",\n      response.status\n    );\n    const responseText = await response.text();\n    console.log(\n      \"handleAuthCallback: Token exchange raw response:\",\n      responseText\n    );\n\n    let data;\n    try {\n      data = JSON.parse(responseText);\n      console.log(\"handleAuthCallback: Parsed response data:\", {\n        hasAccessToken: !!data.access_token,\n        hasRefreshToken: !!data.refresh_token,\n        tokenType: data.token_type,\n        expiresIn: data.expires_in,\n      });\n    } catch (e) {\n      console.error(\"handleAuthCallback: Failed to parse response:\", e);\n      throw new Error(\"Failed to parse token response\");\n    }\n\n    if (!response.ok) {\n      console.error(\n        \"handleAuthCallback: Token exchange failed:\",\n        data.error_description || data.error\n      );\n      throw new Error(\n        data.error_description || data.error || \"Token exchange failed\"\n      );\n    }\n\n    if (!data.refresh_token) {\n      console.warn(\"handleAuthCallback: No refresh token in response\");\n    } else {\n      console.log(\"handleAuthCallback: Storing refresh token in localStorage\");\n      localStorage.setItem(\"gmail_refresh_token\", data.refresh_token);\n    }\n\n    return data.access_token;\n  } catch (error) {\n    console.error(\"handleAuthCallback: Error during token exchange:\", error);\n    throw error;\n  }\n}\n\n// Check if we have valid credentials\nasync function hasValidCredentials() {\n  try {\n    const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n    return !!refreshToken;\n  } catch (error) {\n    console.error(\"Error checking credentials:\", error);\n    return false;\n  }\n}\n\n// Export the sendEmail function\nexport async function sendEmail(to, subject, body) {\n  try {\n    // First check if we have valid credentials\n    const hasCredentials = await hasValidCredentials();\n    if (!hasCredentials) {\n      console.log(\"No valid credentials found, starting OAuth flow\");\n      await startOAuthFlow();\n      return; // The page will redirect to Google OAuth\n    }\n\n    // If we have credentials, proceed with sending email\n    const accessToken = await getAccessToken();\n    if (!accessToken) {\n      throw new Error(\"Could not get access token - authentication required\");\n    }\n\n    // Log the raw data we received\n    console.log(\"Raw email data:\", {\n      to: to,\n      subject: subject,\n      message: body,\n    });\n\n    // Create email message\n    const message = createMessage(to, subject, body);\n\n    // Log the formatted message before encoding\n    const decodedMessage = atob(message);\n    console.log(\"Formatted email before sending:\", decodedMessage);\n\n    // Send email using Gmail API with your email address\n    const response = await fetch(\n      `https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(\n        SENDER_EMAIL\n      )}/messages/send`,\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ raw: message }),\n      }\n    );\n\n    const responseText = await response.text();\n    console.log(\"Gmail API response:\", response.status, responseText);\n\n    if (!response.ok) {\n      console.error(\"Gmail API error response:\", responseText);\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(errorData.error?.message || \"Failed to send email\");\n      } catch (e) {\n        throw new Error(\"Failed to send email: \" + responseText);\n      }\n    }\n\n    // Only return success if we get a message ID back\n    try {\n      const responseData = JSON.parse(responseText);\n      if (!responseData.id) {\n        throw new Error(\"No message ID in response\");\n      }\n      return {\n        success: true,\n        messageId: responseData.id,\n        message: \"Email sent successfully and confirmed by Gmail\",\n      };\n    } catch (e) {\n      throw new Error(\"Could not confirm email was sent: \" + responseText);\n    }\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw error;\n  }\n}\n\nfunction createMessage(recipientEmails, subject, messageText) {\n  // Format the email headers properly\n  const headers = {\n    \"MIME-Version\": \"1.0\",\n    \"Content-Type\": 'text/plain; charset=\"UTF-8\"',\n    \"Content-Transfer-Encoding\": \"7bit\",\n    From: SENDER_EMAIL,\n    To: recipientEmails.join(\",\"),\n    Subject: subject,\n  };\n\n  // Build the email with proper headers\n  const email =\n    Object.entries(headers)\n      .map(([key, value]) => `${key}: ${value}`)\n      .join(\"\\r\\n\") +\n    \"\\r\\n\\r\\n\" +\n    messageText;\n\n  // Base64URL encode the email\n  const base64Email = btoa(email)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  console.log(\"Created email:\", {\n    headers,\n    messageText,\n    encodedLength: base64Email.length,\n  });\n\n  return base64Email;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}