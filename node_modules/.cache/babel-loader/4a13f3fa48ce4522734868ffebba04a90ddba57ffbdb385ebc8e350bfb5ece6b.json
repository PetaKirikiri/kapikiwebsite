{"ast":null,"code":"const OAUTH_CLIENT_ID = \"YOUR_OAUTH_CLIENT_ID\"; // We'll get this from Google Cloud Console\nconst OAUTH_REDIRECT_URI = window.location.origin + \"/oauth-callback\";\n\n// Function to handle Google OAuth login\nexport async function initializeGmailAuth() {\n  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${OAUTH_CLIENT_ID}&redirect_uri=${encodeURIComponent(OAUTH_REDIRECT_URI)}&response_type=token&scope=https://www.googleapis.com/auth/gmail.send`;\n\n  // Store the current page URL so we can return after auth\n  localStorage.setItem(\"emailAuthReturnTo\", window.location.pathname);\n\n  // Redirect to Google login\n  window.location.href = authUrl;\n}\n\n// Function to get access token from URL after OAuth redirect\nexport function getAccessTokenFromUrl() {\n  const hash = window.location.hash.substring(1);\n  const params = new URLSearchParams(hash);\n  return params.get(\"access_token\");\n}\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    // Get the access token from localStorage or redirect to auth\n    let accessToken = localStorage.getItem(\"gmail_access_token\");\n    if (!accessToken) {\n      initializeGmailAuth();\n      return;\n    }\n\n    // Create email message\n    const message = createMessage(recipientEmails, subject, messageText);\n\n    // Send email using Gmail API\n    const response = await fetch(\"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        raw: message\n      })\n    });\n    if (!response.ok) {\n      var _errorData$error;\n      const errorData = await response.json();\n      if (response.status === 401) {\n        // Token expired, clear it and redirect to auth\n        localStorage.removeItem(\"gmail_access_token\");\n        initializeGmailAuth();\n        return;\n      }\n      throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || \"Failed to send email\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw error;\n  }\n}\nfunction createMessage(recipientEmails, subject, messageText) {\n  const emailLines = [\"MIME-Version: 1.0\", 'Content-Type: text/plain; charset=\"UTF-8\"', \"Content-Transfer-Encoding: 7bit\", \"to: \" + recipientEmails.join(\",\"), \"subject: \" + subject, \"\", messageText].join(\"\\r\\n\");\n  return btoa(emailLines).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}","map":{"version":3,"names":["OAUTH_CLIENT_ID","OAUTH_REDIRECT_URI","window","location","origin","initializeGmailAuth","authUrl","encodeURIComponent","localStorage","setItem","pathname","href","getAccessTokenFromUrl","hash","substring","params","URLSearchParams","get","sendEmail","recipientEmails","subject","messageText","accessToken","getItem","message","createMessage","response","fetch","method","headers","Authorization","body","JSON","stringify","raw","ok","_errorData$error","errorData","json","status","removeItem","Error","error","console","emailLines","join","btoa","replace"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/emailService.js"],"sourcesContent":["const OAUTH_CLIENT_ID = \"YOUR_OAUTH_CLIENT_ID\"; // We'll get this from Google Cloud Console\nconst OAUTH_REDIRECT_URI = window.location.origin + \"/oauth-callback\";\n\n// Function to handle Google OAuth login\nexport async function initializeGmailAuth() {\n  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${OAUTH_CLIENT_ID}&redirect_uri=${encodeURIComponent(\n    OAUTH_REDIRECT_URI\n  )}&response_type=token&scope=https://www.googleapis.com/auth/gmail.send`;\n\n  // Store the current page URL so we can return after auth\n  localStorage.setItem(\"emailAuthReturnTo\", window.location.pathname);\n\n  // Redirect to Google login\n  window.location.href = authUrl;\n}\n\n// Function to get access token from URL after OAuth redirect\nexport function getAccessTokenFromUrl() {\n  const hash = window.location.hash.substring(1);\n  const params = new URLSearchParams(hash);\n  return params.get(\"access_token\");\n}\n\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    // Get the access token from localStorage or redirect to auth\n    let accessToken = localStorage.getItem(\"gmail_access_token\");\n    if (!accessToken) {\n      initializeGmailAuth();\n      return;\n    }\n\n    // Create email message\n    const message = createMessage(recipientEmails, subject, messageText);\n\n    // Send email using Gmail API\n    const response = await fetch(\n      \"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\",\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ raw: message }),\n      }\n    );\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      if (response.status === 401) {\n        // Token expired, clear it and redirect to auth\n        localStorage.removeItem(\"gmail_access_token\");\n        initializeGmailAuth();\n        return;\n      }\n      throw new Error(errorData.error?.message || \"Failed to send email\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw error;\n  }\n}\n\nfunction createMessage(recipientEmails, subject, messageText) {\n  const emailLines = [\n    \"MIME-Version: 1.0\",\n    'Content-Type: text/plain; charset=\"UTF-8\"',\n    \"Content-Transfer-Encoding: 7bit\",\n    \"to: \" + recipientEmails.join(\",\"),\n    \"subject: \" + subject,\n    \"\",\n    messageText,\n  ].join(\"\\r\\n\");\n\n  return btoa(emailLines)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n}\n"],"mappings":"AAAA,MAAMA,eAAe,GAAG,sBAAsB,CAAC,CAAC;AAChD,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAG,iBAAiB;;AAErE;AACA,OAAO,eAAeC,mBAAmBA,CAAA,EAAG;EAC1C,MAAMC,OAAO,GAAG,0DAA0DN,eAAe,iBAAiBO,kBAAkB,CAC1HN,kBACF,CAAC,uEAAuE;;EAExE;EACAO,YAAY,CAACC,OAAO,CAAC,mBAAmB,EAAEP,MAAM,CAACC,QAAQ,CAACO,QAAQ,CAAC;;EAEnE;EACAR,MAAM,CAACC,QAAQ,CAACQ,IAAI,GAAGL,OAAO;AAChC;;AAEA;AACA,OAAO,SAASM,qBAAqBA,CAAA,EAAG;EACtC,MAAMC,IAAI,GAAGX,MAAM,CAACC,QAAQ,CAACU,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;EAC9C,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAACH,IAAI,CAAC;EACxC,OAAOE,MAAM,CAACE,GAAG,CAAC,cAAc,CAAC;AACnC;AAEA,OAAO,eAAeC,SAASA,CAACC,eAAe,EAAEC,OAAO,EAAEC,WAAW,EAAE;EACrE,IAAI;IACF;IACA,IAAIC,WAAW,GAAGd,YAAY,CAACe,OAAO,CAAC,oBAAoB,CAAC;IAC5D,IAAI,CAACD,WAAW,EAAE;MAChBjB,mBAAmB,CAAC,CAAC;MACrB;IACF;;IAEA;IACA,MAAMmB,OAAO,GAAGC,aAAa,CAACN,eAAe,EAAEC,OAAO,EAAEC,WAAW,CAAC;;IAEpE;IACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8DAA8D,EAC9D;MACEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUR,WAAW,EAAE;QACtC,cAAc,EAAE;MAClB,CAAC;MACDS,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,GAAG,EAAEV;MAAQ,CAAC;IACvC,CACF,CAAC;IAED,IAAI,CAACE,QAAQ,CAACS,EAAE,EAAE;MAAA,IAAAC,gBAAA;MAChB,MAAMC,SAAS,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MACvC,IAAIZ,QAAQ,CAACa,MAAM,KAAK,GAAG,EAAE;QAC3B;QACA/B,YAAY,CAACgC,UAAU,CAAC,oBAAoB,CAAC;QAC7CnC,mBAAmB,CAAC,CAAC;QACrB;MACF;MACA,MAAM,IAAIoC,KAAK,CAAC,EAAAL,gBAAA,GAAAC,SAAS,CAACK,KAAK,cAAAN,gBAAA,uBAAfA,gBAAA,CAAiBZ,OAAO,KAAI,sBAAsB,CAAC;IACrE;IAEA,OAAO,MAAME,QAAQ,CAACY,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF;AAEA,SAASjB,aAAaA,CAACN,eAAe,EAAEC,OAAO,EAAEC,WAAW,EAAE;EAC5D,MAAMuB,UAAU,GAAG,CACjB,mBAAmB,EACnB,2CAA2C,EAC3C,iCAAiC,EACjC,MAAM,GAAGzB,eAAe,CAAC0B,IAAI,CAAC,GAAG,CAAC,EAClC,WAAW,GAAGzB,OAAO,EACrB,EAAE,EACFC,WAAW,CACZ,CAACwB,IAAI,CAAC,MAAM,CAAC;EAEd,OAAOC,IAAI,CAACF,UAAU,CAAC,CACpBG,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}