{"ast":null,"code":"import { auth } from \"../firebase\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\nfunction createMessage(to, bcc, subject, messageText) {\n  const str = [\"From: \" + SENDER_EMAIL, \"To: \" + to, \"Bcc: \" + bcc.join(\",\"), \"Subject: \" + subject, \"\", messageText].join(\"\\n\");\n  const encodedMessage = btoa(str).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  return encodedMessage;\n}\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    const user = auth.currentUser;\n    if (!user) {\n      throw new Error(\"User not authenticated\");\n    }\n    const idToken = await user.getIdToken();\n    const message = createMessage(SENDER_EMAIL, recipientEmails, subject, messageText);\n\n    // Call your backend service instead of Gmail API directly\n    const response = await fetch(\"/api/send-email\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${idToken}`\n      },\n      body: JSON.stringify({\n        message,\n        recipientEmails,\n        subject\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || \"Failed to send email\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw new Error(\"Failed to send email. Please try again later.\");\n  }\n}","map":{"version":3,"names":["auth","SENDER_EMAIL","createMessage","to","bcc","subject","messageText","str","join","encodedMessage","btoa","replace","sendEmail","recipientEmails","user","currentUser","Error","idToken","getIdToken","message","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","errorData","json","error","console"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/emailService.js"],"sourcesContent":["import { auth } from \"../firebase\";\n\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\nfunction createMessage(to, bcc, subject, messageText) {\n  const str = [\n    \"From: \" + SENDER_EMAIL,\n    \"To: \" + to,\n    \"Bcc: \" + bcc.join(\",\"),\n    \"Subject: \" + subject,\n    \"\",\n    messageText,\n  ].join(\"\\n\");\n\n  const encodedMessage = btoa(str)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  return encodedMessage;\n}\n\nexport async function sendEmail(recipientEmails, subject, messageText) {\n  try {\n    const user = auth.currentUser;\n    if (!user) {\n      throw new Error(\"User not authenticated\");\n    }\n\n    const idToken = await user.getIdToken();\n    const message = createMessage(\n      SENDER_EMAIL,\n      recipientEmails,\n      subject,\n      messageText\n    );\n\n    // Call your backend service instead of Gmail API directly\n    const response = await fetch(\"/api/send-email\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${idToken}`,\n      },\n      body: JSON.stringify({\n        message,\n        recipientEmails,\n        subject,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || \"Failed to send email\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw new Error(\"Failed to send email. Please try again later.\");\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,aAAa;AAElC,MAAMC,YAAY,GAAG,mBAAmB;AAExC,SAASC,aAAaA,CAACC,EAAE,EAAEC,GAAG,EAAEC,OAAO,EAAEC,WAAW,EAAE;EACpD,MAAMC,GAAG,GAAG,CACV,QAAQ,GAAGN,YAAY,EACvB,MAAM,GAAGE,EAAE,EACX,OAAO,GAAGC,GAAG,CAACI,IAAI,CAAC,GAAG,CAAC,EACvB,WAAW,GAAGH,OAAO,EACrB,EAAE,EACFC,WAAW,CACZ,CAACE,IAAI,CAAC,IAAI,CAAC;EAEZ,MAAMC,cAAc,GAAGC,IAAI,CAACH,GAAG,CAAC,CAC7BI,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAErB,OAAOF,cAAc;AACvB;AAEA,OAAO,eAAeG,SAASA,CAACC,eAAe,EAAER,OAAO,EAAEC,WAAW,EAAE;EACrE,IAAI;IACF,MAAMQ,IAAI,GAAGd,IAAI,CAACe,WAAW;IAC7B,IAAI,CAACD,IAAI,EAAE;MACT,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,MAAMC,OAAO,GAAG,MAAMH,IAAI,CAACI,UAAU,CAAC,CAAC;IACvC,MAAMC,OAAO,GAAGjB,aAAa,CAC3BD,YAAY,EACZY,eAAe,EACfR,OAAO,EACPC,WACF,CAAC;;IAED;IACA,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,EAAE;MAC9CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUP,OAAO;MAClC,CAAC;MACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBR,OAAO;QACPN,eAAe;QACfR;MACF,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACe,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACvC,MAAM,IAAId,KAAK,CAACa,SAAS,CAACE,KAAK,IAAI,sBAAsB,CAAC;IAC5D;IAEA,OAAO,MAAMX,QAAQ,CAACU,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAM,IAAIf,KAAK,CAAC,+CAA+C,CAAC;EAClE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}