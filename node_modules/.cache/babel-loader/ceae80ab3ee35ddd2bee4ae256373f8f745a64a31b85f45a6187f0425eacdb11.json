{"ast":null,"code":"// We'll load the OAuth credentials from the file\nlet oauthCredentials = null;\n\n// Get the base URL considering the basename\nconst getBaseUrl = () => {\n  return \"/kapikiwebsite\"; // Always use /kapikiwebsite for consistency\n};\n\n// Use the base URL for the redirect URI\nconst OAUTH_REDIRECT_URI = window.location.origin + getBaseUrl() + \"/oauth-callback\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\nasync function loadOAuthCredentials() {\n  if (oauthCredentials) return oauthCredentials;\n  try {\n    var _oauthCredentials$web;\n    // Load directly from the public directory\n    const credentialsPath = \"/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json\";\n    console.log(\"Trying to load credentials from:\", window.location.origin + credentialsPath);\n    const response = await fetch(credentialsPath);\n    if (!response.ok) {\n      const text = await response.text();\n      console.error(\"Failed to load credentials. Full details:\", {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        fullText: text,\n        // Log the full text to see what we're getting back\n        headers: Object.fromEntries(response.headers.entries())\n      });\n      throw new Error(`Could not load OAuth credentials (${response.status}). Please check:\\n` + \"1. The client_secret file is in the public folder\\n\" + \"2. The Google Cloud project is properly configured\\n\" + \"3. The OAuth consent screen is set up\\n\" + \"4. You have the necessary Google Workspace permissions\");\n    }\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      throw new Error(`Wrong file type received: ${contentType}. This usually means:\\n` + \"1. The credentials file is not being served correctly\\n\" + \"2. You might need to restart your development server\\n\" + \"3. The file path might be incorrect\");\n    }\n    oauthCredentials = await response.json();\n    console.log(\"Successfully loaded OAuth credentials with client_id:\", (_oauthCredentials$web = oauthCredentials.web) !== null && _oauthCredentials$web !== void 0 && _oauthCredentials$web.client_id ? \"Present\" : \"Missing\");\n    return oauthCredentials;\n  } catch (error) {\n    console.error(\"Detailed OAuth credentials error:\", error);\n    throw error;\n  }\n}\n\n// Function to start the OAuth flow\nasync function startOAuthFlow() {\n  console.log(\"Starting OAuth flow\");\n  const credentials = await loadOAuthCredentials();\n\n  // Store current path for return after auth\n  const currentPath = window.location.pathname.replace(getBaseUrl(), \"\") || \"/clients\";\n  console.log(\"Storing return path:\", currentPath);\n  localStorage.setItem(\"emailAuthReturnTo\", currentPath);\n\n  // Build the OAuth URL\n  const authUrl = new URL(\"https://accounts.google.com/o/oauth2/v2/auth\");\n  authUrl.searchParams.append(\"client_id\", credentials.web.client_id);\n  authUrl.searchParams.append(\"redirect_uri\", OAUTH_REDIRECT_URI);\n  authUrl.searchParams.append(\"response_type\", \"code\");\n  authUrl.searchParams.append(\"scope\", \"https://www.googleapis.com/auth/gmail.send\");\n  authUrl.searchParams.append(\"access_type\", \"offline\");\n  authUrl.searchParams.append(\"prompt\", \"consent\");\n  console.log(\"Redirecting to OAuth URL:\", authUrl.toString());\n  // Redirect to Google's OAuth page\n  window.location.href = authUrl.toString();\n}\n\n// Function to get access token using the refresh token\nasync function getAccessToken() {\n  const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n  if (!refreshToken) {\n    console.log(\"No refresh token found, starting OAuth flow\");\n    startOAuthFlow();\n    return null;\n  }\n  console.log(\"Getting access token with refresh token\");\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\"\n    })\n  });\n  if (!response.ok) {\n    console.log(\"Refresh token invalid, starting new OAuth flow\");\n    localStorage.removeItem(\"gmail_refresh_token\");\n    startOAuthFlow();\n    return null;\n  }\n  const data = await response.json();\n  console.log(\"Successfully got new access token\");\n  return data.access_token;\n}\nexport async function handleAuthCallback(code) {\n  console.log(\"handleAuthCallback: Starting to exchange code for tokens\");\n  try {\n    const credentials = await loadOAuthCredentials();\n    console.log(\"handleAuthCallback: Loaded credentials successfully\");\n    console.log(\"handleAuthCallback: About to make token exchange request\");\n    const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: new URLSearchParams({\n        code,\n        client_id: credentials.web.client_id,\n        client_secret: credentials.web.client_secret,\n        redirect_uri: OAUTH_REDIRECT_URI,\n        grant_type: \"authorization_code\"\n      })\n    });\n    console.log(\"handleAuthCallback: Token exchange response status:\", response.status);\n    const responseText = await response.text();\n    console.log(\"handleAuthCallback: Token exchange raw response:\", responseText);\n    let data;\n    try {\n      data = JSON.parse(responseText);\n      console.log(\"handleAuthCallback: Parsed response data:\", {\n        hasAccessToken: !!data.access_token,\n        hasRefreshToken: !!data.refresh_token,\n        tokenType: data.token_type,\n        expiresIn: data.expires_in\n      });\n    } catch (e) {\n      console.error(\"handleAuthCallback: Failed to parse response:\", e);\n      throw new Error(\"Failed to parse token response\");\n    }\n    if (!response.ok) {\n      console.error(\"handleAuthCallback: Token exchange failed:\", data.error_description || data.error);\n      throw new Error(data.error_description || data.error || \"Token exchange failed\");\n    }\n    if (!data.refresh_token) {\n      console.warn(\"handleAuthCallback: No refresh token in response\");\n    } else {\n      console.log(\"handleAuthCallback: Storing refresh token in localStorage\");\n      localStorage.setItem(\"gmail_refresh_token\", data.refresh_token);\n    }\n    return data.access_token;\n  } catch (error) {\n    console.error(\"handleAuthCallback: Error during token exchange:\", error);\n    throw error;\n  }\n}\n\n// Check if we have valid credentials\nasync function hasValidCredentials() {\n  try {\n    const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n    return !!refreshToken;\n  } catch (error) {\n    console.error(\"Error checking credentials:\", error);\n    return false;\n  }\n}\n\n// Export the sendEmail function\nexport async function sendEmail(to, subject, body) {\n  try {\n    // First check if we have valid credentials\n    const hasCredentials = await hasValidCredentials();\n    if (!hasCredentials) {\n      console.log(\"No valid credentials found, starting OAuth flow\");\n      await startOAuthFlow();\n      return; // The page will redirect to Google OAuth\n    }\n\n    // If we have credentials, proceed with sending email\n    const accessToken = await getAccessToken();\n    if (!accessToken) {\n      throw new Error(\"Could not get access token - authentication required\");\n    }\n\n    // Log the raw data we received\n    console.log(\"Raw email data:\", {\n      to: to,\n      subject: subject,\n      message: body\n    });\n\n    // Create email message\n    const message = createMessage(to, subject, body);\n\n    // Log the formatted message before encoding\n    const decodedMessage = atob(message);\n    console.log(\"Formatted email before sending:\", decodedMessage);\n\n    // Send email using Gmail API with your email address\n    const response = await fetch(`https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(SENDER_EMAIL)}/messages/send`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        raw: message\n      })\n    });\n    const responseText = await response.text();\n    console.log(\"Gmail API response:\", response.status, responseText);\n    if (!response.ok) {\n      console.error(\"Gmail API error response:\", responseText);\n      try {\n        var _errorData$error;\n        const errorData = JSON.parse(responseText);\n        throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || \"Failed to send email\");\n      } catch (e) {\n        throw new Error(\"Failed to send email: \" + responseText);\n      }\n    }\n\n    // Only return success if we get a message ID back\n    try {\n      const responseData = JSON.parse(responseText);\n      if (!responseData.id) {\n        throw new Error(\"No message ID in response\");\n      }\n      return {\n        success: true,\n        messageId: responseData.id,\n        message: \"Email sent successfully and confirmed by Gmail\"\n      };\n    } catch (e) {\n      throw new Error(\"Could not confirm email was sent: \" + responseText);\n    }\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw error;\n  }\n}\nfunction createMessage(recipientEmails, subject, messageText) {\n  // Format the email headers properly\n  const headers = {\n    \"MIME-Version\": \"1.0\",\n    \"Content-Type\": 'text/plain; charset=\"UTF-8\"',\n    \"Content-Transfer-Encoding\": \"7bit\",\n    From: SENDER_EMAIL,\n    To: recipientEmails.join(\",\"),\n    Subject: subject\n  };\n\n  // Build the email with proper headers\n  const email = Object.entries(headers).map(([key, value]) => `${key}: ${value}`).join(\"\\r\\n\") + \"\\r\\n\\r\\n\" + messageText;\n\n  // Base64URL encode the email\n  const base64Email = btoa(email).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  console.log(\"Created email:\", {\n    headers,\n    messageText,\n    encodedLength: base64Email.length\n  });\n  return base64Email;\n}","map":{"version":3,"names":["oauthCredentials","getBaseUrl","OAUTH_REDIRECT_URI","window","location","origin","SENDER_EMAIL","loadOAuthCredentials","_oauthCredentials$web","credentialsPath","console","log","response","fetch","ok","text","error","status","statusText","url","fullText","headers","Object","fromEntries","entries","Error","contentType","get","includes","json","web","client_id","startOAuthFlow","credentials","currentPath","pathname","replace","localStorage","setItem","authUrl","URL","searchParams","append","toString","href","getAccessToken","refreshToken","getItem","method","body","URLSearchParams","client_secret","refresh_token","grant_type","removeItem","data","access_token","handleAuthCallback","code","redirect_uri","responseText","JSON","parse","hasAccessToken","hasRefreshToken","tokenType","token_type","expiresIn","expires_in","e","error_description","warn","hasValidCredentials","sendEmail","to","subject","hasCredentials","accessToken","message","createMessage","decodedMessage","atob","encodeURIComponent","Authorization","stringify","raw","_errorData$error","errorData","responseData","id","success","messageId","recipientEmails","messageText","From","To","join","Subject","email","map","key","value","base64Email","btoa","encodedLength","length"],"sources":["/Users/petakirikiri/Coding/Ka Piki/src/services/emailService.js"],"sourcesContent":["// We'll load the OAuth credentials from the file\nlet oauthCredentials = null;\n\n// Get the base URL considering the basename\nconst getBaseUrl = () => {\n  return \"/kapikiwebsite\"; // Always use /kapikiwebsite for consistency\n};\n\n// Use the base URL for the redirect URI\nconst OAUTH_REDIRECT_URI =\n  window.location.origin + getBaseUrl() + \"/oauth-callback\";\nconst SENDER_EMAIL = \"peta@kapiki.co.nz\";\n\nasync function loadOAuthCredentials() {\n  if (oauthCredentials) return oauthCredentials;\n\n  try {\n    // Load directly from the public directory\n    const credentialsPath =\n      \"/client_secret_811771021125-37nptsve9d17qjgecm2kb8rrm387ieeh.apps.googleusercontent.com.json\";\n\n    console.log(\n      \"Trying to load credentials from:\",\n      window.location.origin + credentialsPath\n    );\n\n    const response = await fetch(credentialsPath);\n\n    if (!response.ok) {\n      const text = await response.text();\n      console.error(\"Failed to load credentials. Full details:\", {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        fullText: text, // Log the full text to see what we're getting back\n        headers: Object.fromEntries(response.headers.entries()),\n      });\n      throw new Error(\n        `Could not load OAuth credentials (${response.status}). Please check:\\n` +\n          \"1. The client_secret file is in the public folder\\n\" +\n          \"2. The Google Cloud project is properly configured\\n\" +\n          \"3. The OAuth consent screen is set up\\n\" +\n          \"4. You have the necessary Google Workspace permissions\"\n      );\n    }\n\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      throw new Error(\n        `Wrong file type received: ${contentType}. This usually means:\\n` +\n          \"1. The credentials file is not being served correctly\\n\" +\n          \"2. You might need to restart your development server\\n\" +\n          \"3. The file path might be incorrect\"\n      );\n    }\n\n    oauthCredentials = await response.json();\n    console.log(\n      \"Successfully loaded OAuth credentials with client_id:\",\n      oauthCredentials.web?.client_id ? \"Present\" : \"Missing\"\n    );\n    return oauthCredentials;\n  } catch (error) {\n    console.error(\"Detailed OAuth credentials error:\", error);\n    throw error;\n  }\n}\n\n// Function to start the OAuth flow\nasync function startOAuthFlow() {\n  console.log(\"Starting OAuth flow\");\n  const credentials = await loadOAuthCredentials();\n\n  // Store current path for return after auth\n  const currentPath =\n    window.location.pathname.replace(getBaseUrl(), \"\") || \"/clients\";\n  console.log(\"Storing return path:\", currentPath);\n  localStorage.setItem(\"emailAuthReturnTo\", currentPath);\n\n  // Build the OAuth URL\n  const authUrl = new URL(\"https://accounts.google.com/o/oauth2/v2/auth\");\n  authUrl.searchParams.append(\"client_id\", credentials.web.client_id);\n  authUrl.searchParams.append(\"redirect_uri\", OAUTH_REDIRECT_URI);\n  authUrl.searchParams.append(\"response_type\", \"code\");\n  authUrl.searchParams.append(\n    \"scope\",\n    \"https://www.googleapis.com/auth/gmail.send\"\n  );\n  authUrl.searchParams.append(\"access_type\", \"offline\");\n  authUrl.searchParams.append(\"prompt\", \"consent\");\n\n  console.log(\"Redirecting to OAuth URL:\", authUrl.toString());\n  // Redirect to Google's OAuth page\n  window.location.href = authUrl.toString();\n}\n\n// Function to get access token using the refresh token\nasync function getAccessToken() {\n  const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n  if (!refreshToken) {\n    console.log(\"No refresh token found, starting OAuth flow\");\n    startOAuthFlow();\n    return null;\n  }\n\n  console.log(\"Getting access token with refresh token\");\n  const credentials = await loadOAuthCredentials();\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: new URLSearchParams({\n      client_id: credentials.web.client_id,\n      client_secret: credentials.web.client_secret,\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\",\n    }),\n  });\n\n  if (!response.ok) {\n    console.log(\"Refresh token invalid, starting new OAuth flow\");\n    localStorage.removeItem(\"gmail_refresh_token\");\n    startOAuthFlow();\n    return null;\n  }\n\n  const data = await response.json();\n  console.log(\"Successfully got new access token\");\n  return data.access_token;\n}\n\nexport async function handleAuthCallback(code) {\n  console.log(\"handleAuthCallback: Starting to exchange code for tokens\");\n  try {\n    const credentials = await loadOAuthCredentials();\n    console.log(\"handleAuthCallback: Loaded credentials successfully\");\n\n    console.log(\"handleAuthCallback: About to make token exchange request\");\n    const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: new URLSearchParams({\n        code,\n        client_id: credentials.web.client_id,\n        client_secret: credentials.web.client_secret,\n        redirect_uri: OAUTH_REDIRECT_URI,\n        grant_type: \"authorization_code\",\n      }),\n    });\n\n    console.log(\n      \"handleAuthCallback: Token exchange response status:\",\n      response.status\n    );\n    const responseText = await response.text();\n    console.log(\n      \"handleAuthCallback: Token exchange raw response:\",\n      responseText\n    );\n\n    let data;\n    try {\n      data = JSON.parse(responseText);\n      console.log(\"handleAuthCallback: Parsed response data:\", {\n        hasAccessToken: !!data.access_token,\n        hasRefreshToken: !!data.refresh_token,\n        tokenType: data.token_type,\n        expiresIn: data.expires_in,\n      });\n    } catch (e) {\n      console.error(\"handleAuthCallback: Failed to parse response:\", e);\n      throw new Error(\"Failed to parse token response\");\n    }\n\n    if (!response.ok) {\n      console.error(\n        \"handleAuthCallback: Token exchange failed:\",\n        data.error_description || data.error\n      );\n      throw new Error(\n        data.error_description || data.error || \"Token exchange failed\"\n      );\n    }\n\n    if (!data.refresh_token) {\n      console.warn(\"handleAuthCallback: No refresh token in response\");\n    } else {\n      console.log(\"handleAuthCallback: Storing refresh token in localStorage\");\n      localStorage.setItem(\"gmail_refresh_token\", data.refresh_token);\n    }\n\n    return data.access_token;\n  } catch (error) {\n    console.error(\"handleAuthCallback: Error during token exchange:\", error);\n    throw error;\n  }\n}\n\n// Check if we have valid credentials\nasync function hasValidCredentials() {\n  try {\n    const refreshToken = localStorage.getItem(\"gmail_refresh_token\");\n    return !!refreshToken;\n  } catch (error) {\n    console.error(\"Error checking credentials:\", error);\n    return false;\n  }\n}\n\n// Export the sendEmail function\nexport async function sendEmail(to, subject, body) {\n  try {\n    // First check if we have valid credentials\n    const hasCredentials = await hasValidCredentials();\n    if (!hasCredentials) {\n      console.log(\"No valid credentials found, starting OAuth flow\");\n      await startOAuthFlow();\n      return; // The page will redirect to Google OAuth\n    }\n\n    // If we have credentials, proceed with sending email\n    const accessToken = await getAccessToken();\n    if (!accessToken) {\n      throw new Error(\"Could not get access token - authentication required\");\n    }\n\n    // Log the raw data we received\n    console.log(\"Raw email data:\", {\n      to: to,\n      subject: subject,\n      message: body,\n    });\n\n    // Create email message\n    const message = createMessage(to, subject, body);\n\n    // Log the formatted message before encoding\n    const decodedMessage = atob(message);\n    console.log(\"Formatted email before sending:\", decodedMessage);\n\n    // Send email using Gmail API with your email address\n    const response = await fetch(\n      `https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(\n        SENDER_EMAIL\n      )}/messages/send`,\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ raw: message }),\n      }\n    );\n\n    const responseText = await response.text();\n    console.log(\"Gmail API response:\", response.status, responseText);\n\n    if (!response.ok) {\n      console.error(\"Gmail API error response:\", responseText);\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(errorData.error?.message || \"Failed to send email\");\n      } catch (e) {\n        throw new Error(\"Failed to send email: \" + responseText);\n      }\n    }\n\n    // Only return success if we get a message ID back\n    try {\n      const responseData = JSON.parse(responseText);\n      if (!responseData.id) {\n        throw new Error(\"No message ID in response\");\n      }\n      return {\n        success: true,\n        messageId: responseData.id,\n        message: \"Email sent successfully and confirmed by Gmail\",\n      };\n    } catch (e) {\n      throw new Error(\"Could not confirm email was sent: \" + responseText);\n    }\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    throw error;\n  }\n}\n\nfunction createMessage(recipientEmails, subject, messageText) {\n  // Format the email headers properly\n  const headers = {\n    \"MIME-Version\": \"1.0\",\n    \"Content-Type\": 'text/plain; charset=\"UTF-8\"',\n    \"Content-Transfer-Encoding\": \"7bit\",\n    From: SENDER_EMAIL,\n    To: recipientEmails.join(\",\"),\n    Subject: subject,\n  };\n\n  // Build the email with proper headers\n  const email =\n    Object.entries(headers)\n      .map(([key, value]) => `${key}: ${value}`)\n      .join(\"\\r\\n\") +\n    \"\\r\\n\\r\\n\" +\n    messageText;\n\n  // Base64URL encode the email\n  const base64Email = btoa(email)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\n  console.log(\"Created email:\", {\n    headers,\n    messageText,\n    encodedLength: base64Email.length,\n  });\n\n  return base64Email;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}